COMMENT ⊗   VALID 00020 PAGES
C REC  PAGE   DESCRIPTION
C00001 00001
C00003 00002	IFN FTDISK,<BEGIN FBPACK↔SUBTTL	LIBRASCOPE SWAPPER AND FAST-BAND SERVICE
C00004 00003	↑FBINI:	SETZM	FBQUE		INITIALIZE
C00007 00004	FAST BAND SERVICE UUO'S
C00010 00005	ADDRESS CHECK THE GOODIE TABLE - DON'T RETURN UNLESS HAPPY.
C00013 00006	UTILITY ROUTINES.
C00015 00007	UUO CALL TO GET A BAND
C00018 00008	UUO TO GET PHYSICAL BAND NUMBER AND OFFSET
C00021 00009	UUO TO TELL YOU IF YOU HAVE A TRANSFER IN PROGRESS
C00023 00010	ROUTINE TO GET A BAND AT ANY LEVEL
C00025 00011	ROUTINE TO RELEASE A BAND AT ANY LEVEL
C00027 00012	ROUTINES TO READ AND WRITE A FAST BAND
C00029 00013	THIS ROUTINE GETS THE PHYSICAL BAND NUMBER FROM THE LOGICAL BAND NUMBER
C00032 00014	COMMON READ-WRITE ROUTINE
C00036 00015	INTERRUPT LEVEL CODE . . .
C00038 00016	FIRST, THE DISK STARTUP ROUTINE . . .
C00043 00017	COME HERE WHEN A TASK HAS BEEN COMPLETED . . .
C00046 00018	HERE AFTER THE TV CAMERA INTERRUPT HAS GONE OFF.
C00047 00019	DISK ERROR HANDLER.
C00050 00020	IOP ERROR RECOVERY
C00054 ENDMK
C⊗;
IFN FTDISK,<BEGIN FBPACK↔SUBTTL	LIBRASCOPE SWAPPER AND FAST-BAND SERVICE
;JAM 22-APR-69

;;POINTERS INTO FBBAND

↑FBLOGP:	POINT 6,(AC3),23	; POINTS TO LOGICAL BAND NUMBER
FBLUZP:		POINT 4,(AC3),27	; COUNTS WHEN BAND LOSES
FBPROT:		POINT 2,(AC3),29	; POINTS TO FOREIGN JOB READ-WRITE ENABLE BITS
↑FBJOBP:	POINT 6,(AC3),35	; POINTS TO JOB NUMBER

RDEN←←1		; READ ENABLE
WREN←←2		; WRITE ENABLE

DSKCHL←←CAT(CH,\DSKCHN)
↑FBINI:	SETZM	FBQUE		;INITIALIZE
	SETZM	FBTASK
	SETZM	FBSBUSY
	SETOM	FBBUSY
	SETZM	FBACT
	MOVEI	AC1,LJOBN-1	;ASSUME THE WORST.
	MOVEM	AC1,JOBNM1
	CONSZ	DSK,1B27	;IF BIT 27 IS ON, THE DISK IS OFF LINE
	POPJ	P,		;IF NO DISK, QUIT NOW
	SETOM	FBACT		;FAST BANDS ARE HERE TODAY.
	MOVNI	AC1,14		;KEEP RESERVE FOR ERRORS, LARGE JOBS & SEGMENTS
	MOVEM	AC1,JOBNM1
	MOVE	AC3,[XWD -NBANDS,FBBAND]
FBIN4:	SKIPGE	(AC3)		;IS THIS PERMANENT LOSER?
	JRST	FBIN5		;YES.
	LDB	AC2,FBLUZP	;GET THE ERROR COUNT.
	LDB	AC1,FBLOGP	;GET LOGICAL NUMBER
	CAIGE	AC1,MAXFB	;IS IT A SWAPPING BAND?
	SETZM	(AC3)		;NOT FOR SWAPPING. DEASSIGN IT.
	DPB	AC2,FBLUZP	;RESTORE THE COUNT.
	AOS	JOBNM1		;ANOTHER BAND FREE!
FBIN5:	AOBJN	AC3,FBIN4	;LOOP THRU THE BANDS.

	MOVE	AC3,SYSBAND
	LSH	AC3,-=12
	SETOM	FBBAND(AC3)	;PROTECT SYSTEM
	SOS	JOBNM1		;GOBBLED ANOTHER
	MOVEM	AC3,SYSBND	;SET RIGHT-ADJUSTED COPY OF SYSTEM BAND NUMBER

IFN FTDDT,<IFN	FTDSWP,<
	SKIPN	DDTSWP		;IS SWAPPING DDT REQUESTED?
	JRST	FBIN6		;NO. NO NEED TO RESERVE A BAND.
	MOVE	AC3,DDTBAND
	LSH	AC3,=-12
	SETOM	FBBAND(AC3)	;SAVE A BAND FOR SWAPPING DDT.
	SOS	JOBNM1		;AND ANOTHER BAND GOBBLED.
>>

FBIN6:	MOVE	AC1,JOBNM1	;THIS IS THE NUMBER OF BANDS-RESERVE.
	CAILE	AC1,JOBN-1	;CAN'T BE LARGER THAN THIS
	MOVEI	AC1,JOBN-1	;
	MOVEM	AC1,JOBNM1	;THIS IS NOW THE MAX JOB NUMBER
	POPJ	P,
;FAST BAND SERVICE UUO'S
;CALLING SEQUENCES . . .
;	UFBRD <AC CONTAINING BAND NUMBER>,<ADDRESS OF GOODIE TABLE>
;	<RETURN HERE IF ERRORS ENCOUNTERED>

;	UFBWRT <AC CONTAINING BAND NUMBER>,<ADDRESS OF GOODIE TABLE>
;	<RETURN HERE IF ERRORS ENCOUNTERED>

;WHERE GOODIE TABLE IS . . .
;	1) CORE ADDRESS, SIGN BIT SET IF NO WAIT
;	2) NUMBER OF WORDS
;	3) DISK SECTOR ADDRESS (.LE.2431 DECIMAL)

↑UFBRD:	PUSHJ	P,UFBSET		;CHECK GOODIES. DON'T RETURN IF ERROR.
	XCTR	XR,[SKIPL (UUO)]		;IS THIS A NO WAIT UUO?
	JRST	NORRD			;NO. GO DO THE READ AND WAIT.
	MOVSI	DAT,UFBD		;QUEUE UP THE TRANSFER.
	HRRI	DAT,(J)
	PUSHJ	P,FBRD
	POPJ	P,			;LOSE.
	CONO	PI,DSKON		;TURN ON THE DISK
	MOVEI	AC1,FBINP		;SET THE TRANSFER IN PROGRESS BIT
	IORM	AC1,JBTSTS(J)
	JRST	CPOPJ1			;AND RETURN.

NORRD:	SETZ	DAT,			;ZERO DAT FOR A TRANSFER AND WAIT UUO.
	PUSHJ	P,FBRD			;QUEUE TRANSFER.
	POPJ	P,			;OOPS.
	JRST	FBWAIT			;WAIT UNTIL TRANSFER IS COMPLETE

↑UFBWRT:PUSHJ	P,UFBSET		;ADDRESS CHECK GOODIES. 
	XCTR	XR,[SKIPL (UUO)]	;SAME AS UFBRD ABOVE.
	JRST	NORWR
	MOVSI	DAT,UFBD
	HRRI	DAT,(J)
	PUSHJ	P,FBWRT
	POPJ	P,
	CONO	PI,DSKON
	MOVEI	AC1,FBINP
	IORM	AC1,JBTSTS(J)
	JRST	CPOPJ1

NORWR:	SETZ	DAT,
	PUSHJ	P,FBWRT
	POPJ	P,
FBWAIT:	MOVNI	DSER,IOWQ	;UUO LEVEL WAIT ROUTINE. CALLED AFTER FBCOM.
	MOVEM	DSER,JOBQUE(J)	;REQUEUE TO IOWQ
	CONO	PI,DSKON	;TURN ON THE DISK CHANNEL
	PUSHJ	P,WSCHED	;TURN OFF THIS JOB
	SKIPLE	FBRETRY(AC1)	;HERE WHEN TASK DONE. WERE THERE ERRORS?
	AOS	(P)		;NO ERROR. SET SKIP RETURN TO INDICATE SUCCESS
	CAIE	AC1,FBSPARE	;IS THIS THE SPARE TASK BLOCK?
	JRST	FSGIVE		;NOT SPARE. RETURN TASK BLOCK TO FREE STORAGE
	SETZM	FBSBUSY		;RELEASE SPARE
	POPJ	P,		;RETURN TO UUOCON
;ADDRESS CHECK THE GOODIE TABLE - DON'T RETURN UNLESS HAPPY.

UFBSET:	MOVEI	TAC1,FBINP		;IS THERE ALREADY A TRANSFER IN PROGRESS
	TDNE	TAC1,JBTSTS(J)
	PUSHJ	P,FBCW			;YES, WAIT FOR IT
	MOVEI	TAC1,FBERP		;CLEAR ERROR BIT FOR PREVIOUS TRANSFER.
	ANDCAM	TAC1,JBTSTS(J)		;CAN'T GET STATUS FOR PREVIOUS ONE
	XCTR	XR,[HRRZ UCHN,(UCHN)]
	PUSHJ	P,FBBGET		;CHECK BAND NUMBER.
	XCTR	XR,[HRRZ TAC1,(UUO)]	; PICK UP CORE ADDRESS
	PUSHJ	P,RELOCA		; RELOCATE AND ADDRESS CHECK
	JRST	UFBSE2			; ILM
	JUMPL	TAC1,UFBSE2		; REFERENCE TO WRITE PROTECTED CORE.
	MOVE	TAC,TAC1		; SAVE RELOCATED ADDRESS
	XCTR	XR,[MOVM AC2,1(UUO)]	; PICK UP WORD COUNT
	JUMPE	AC2,UFBSE2
	XCTR	XR,[MOVE TAC1,(UUO)]	; GET CORE ADDRESS AGAIN!
	ADDI	TAC1,-1(AC2)		; ADDRESS CHECK LAST WORD OF TRANSFER
	PUSHJ	P,RELOCB		; ADDRESS CHECK LAST WORD OF TRANSFER
					; (MUST BE IN SAME SEGMENT)
	JRST	UFBSE2
	XCTR	XR,[SKIPL TAC1,2(UUO)]
	CAILE	TAC1,2*=1216-1
	JRST	UFBSE1
	POPJ	P,

; ROUTINE TO CHECK A LOGICAL OR PHYSICAL BAND NUMBER
; ENTER WITH NUMBER IN UCHN

FBBGET:	TRNE	UCHN,400000		;PHYSICAL BAND NUMBER?
	CAIL	UCHN,400000+NBANDS	;YES. SKIP IF IN RANGE. 
	CAIGE	UCHN,MAXFB		;LOGICAL BAND, (OR PHYSICAL TOO BIG.)
	POPJ	P,			;BAND IS IN BOUNDS.
	JSP	TAC,UUOMES		;TELL LOSER.
	ASCIZ	/LOGICAL OR PHYSICAL BAND NUMBER OUT OF BOUNDS. UUO/

UFBSE1:	JSP TAC,UUOMES
	ASCIZ /DISK ADDRESS OUT OF BOUNDS, UUO/

UFBSE2:	JSP TAC,UUOMES
	ASCIZ /ADDRESS CHECK FOR FAST-BAND CALL, UUO/
;UTILITY ROUTINES.

;HERE IF HE TRIES TO START ANOTHER TRANSFER WHILE A NO-WAIT IS IN PROGRESS.
FBCW:	MOVNI	AC1,IOWQ		;WAIT FOR TRANSFER TO COMPLETE.
	MOVEM	AC1,JOBQUE(J)		;REQUEUE JOB TO IOWQ
	MOVEI	AC1,FBJWT		;SET FBWAIT IN JBTSTS
	IORM	AC1,JBTSTS(J)		;
	JRST	WSCHED			;WAIT.

;HERE TO COMPLETE A NO-WAIT TRANSFER.
UFBD:	MOVEI	AC1,FBINP!FBJWT		;HERE WHEN TRANSFER COMPLETES.
	SETZ	AC2,			;ASSUME NO ERRORS.
	TRZE	DAT,400000		;WAS THERE AN ERROR.
	MOVEI	AC2,FBERP		;YES. PICKUP ERROR BIT.
	MOVEI	J,(DAT)			;LOAD JOB NUMBER.
	SOS	JBTGLU(J)		;UNGLUE THIS JOB.
IFN FTSTAT,<PUSHJ P,GLUSTT>
	IORB	AC2,JBTSTS(J)		;TURN ON ERROR BIT IF NEEDED.
	ANDCAM	AC1,JBTSTS(J)		;SHUT OFF TRANSFER IN PROGRESS AND WAIT BITS
	MOVM	AC1,JOBQUE(J)		;IS THIS GUY IN IOWQ?
	CAIN	AC1,IOWQ
	TRNN	AC2,FBJWT		;IN IOWQ. WAS HE WAITING FOR ME?
	POPJ	P,			;NOT IOWQ OR NOT WAITING FOR ME.
	MOVNI	AC1,RUNQ		;HE WAS WAITING. REQUEUE HIM TO RUNQ.
	MOVEM	AC1,JOBQUE(J)
	JRST	REQUE
;UUO CALL TO GET A BAND
; CALLING . . .
;	MOVE AC,[XWD <OFFSET & ENABLE BITS>,<BAND NUMBER>
;	CALL AC,[SIXBIT /UFBGET/]
;	<FAILURE RETURN>
;	<SUCCESS RETURN, PHYSICAL BAND NUMBER IN AC>
; <OFFSET> MAY BE ZERO, FOR LET THE SYSTEM SET IT.
; <ENABLE BITS> ARE 100000 FOR READ ENABLE, 200000 FOR WRITE ENABLE
; <BAND NUMBER> MAY BE 0 TO MAXFB-1 OR 400000 BIT ON FOR PHYSICAL BAND

↑UFBGET:
	PUSH	P,TAC
	TLNN	TAC,403777		;ANY OFFSET THERE?
	JRST	UFBGE1			;NO.
	LDB	AC1,[POINT 11,TAC,17]
	CAIL	AC1,=1216
	JRST	OFFTL			;OFFSET TOO LARGE.
UFBGE1:	HRRZ	UCHN,(P)		;PICK UP BAND NUMBER
	PUSHJ	P,FBBGET		;CHECK FOR LEGAL BAND NUMBER.
	TRNE	UCHN,400000		;IS THIS A PHYSICAL REQUEST?
	JRST	UFBGE2			;YES. DON'T NEED TO CALL FBGET.
	PUSHJ	P,FBGET			;GO GET A BAND FOR THIS GUY.
	JRST	TPOPJ			;NO BANDS AVAILABE. FIX STACK AND LEAVE
UFBGE3:	POP	P,AC1			;GET BACK ARGUEMENT
	TLNE	AC1,403777		;ANY OFFSET?
	HLLM	AC1,(AC3)		;YES, SET IT
	LDB	AC2,[POINT 2,AC1,2]	;GET READ/WRITE ENABLE BITS.
	DPB	AC2,FBPROT		;STUFF THEM INTO PROTECTION FIELD.
	LDB	UCHN,PUUOAC		;PICK UP ACCUMULATOR NUMBER AGAIN
	AOS	(P)
	HLL	TAC,(AC3)		;GET THE OFFSET
	DPB	AC2,[POINT 2,TAC,2]	;STUFF THE FOREIGN ENABLE BITS INTO TAC.
	HRRI	TAC,400000-FBBAND(AC3)	;LOAD 400000+PHYSICAL NUMBER IN TAC
	JRST	STOTAC

UFBGE2:	HRRZI	AC3,FBBAND-400000(UCHN)	;MAKE POINTER
	LDB	AC1,FBJOBP		;IS THIS BAND CLAIMED?
	JUMPE	AC1,UFBGE4		;NO. WE CLAIM IT
	CAIN	J,(AC1)			;PERHAPS THIS IS OURS ALREADY?
	JRST	UFBGE3			;YES. 
	JRST	TPOPJ			;WE CAN'T HAVE THIS BAND.

UFBGE4:	DPB	J,FBJOBP		;WE HAVE IT NOW
	JRST	UFBGE3

OFFTL:	JSP	TAC,UUOMES
	ASCIZ	/OFFSET TOO LARGE, UUO/


↑UFBGIV:HRRZ	UCHN,TAC		;UUO TO RELEASE A FAST BAND
	JRST	FBGIVE
;UUO TO GET PHYSICAL BAND NUMBER AND OFFSET
; CALLING . . .
;	MOVE AC,<LOGICAL OR PHYSICAL BAND NUMBER>
;	CALL AC,[SIXBIT /UFBPHY/]
; RETURNS 0 IF NO SUCH BAND
; RETURNS OFFSET IN LH AND PHYSICAL BAND IN RH
; SETS BIT 2 IF YOU HAVE READ ACCESS
; SETS BIT 1 IF YOU HAVE WRITE ACCESS

↑FBPHY:	SKIPN	FBACT			;ARE FAST BANDS ACTIVE TODAY.
	JRST	UUOERR			;NO.
	TRNE	TAC,400000		;PHYSICAL OR LOGICAL?
	JRST	SPHYB			;PHYSICAL.
	MOVEI	UCHN,(TAC)		;GET THE LOGICAL NUMBER.
	PUSHJ	P,FBSEARCH		;SEARCH FOR THIS BAND NUMBER.
	JRST	RTZERO			;NO THERE. TELL HIM 0.
FBPHY1:	LDB	AC1,FBLOGP		;GET THE LOGICAL NUMBER
	CAIE	AC1,(UCHN)		;IS THIS THE RIGHT ONE.
	JRST	RSH			;NO. CONTINUE SEARCH
	HLL	TAC,(AC3)		;GET THE OFFSET FIELD.
	HRRI	TAC,400000-FBBAND(AC3)	;GET 400000+PHYSICAL NUMBER
FBPHY2:	TLO	TAC,300000		;OWNER HAS READ AND WRITE ACCESS.
	JRST	STOTAC			;RETURN DATA TO USER.

RSH:	PUSHJ	P,FBRESEARCH		;LOOK FOR ANOTHER BAND BELONGING TO THIS JOB
	JRST	RTZERO			;NONE THERE.
	JRST	FBPHY1			;CHECK TO SEE IF ITS THE RIGHT ONE.

SPHYB:	MOVEI	AC3,FBBAND-400000(TAC)	;GET THE POINTER
	HLL	TAC,(AC3)		;GET THE OFFSET FIELD.
	LDB	AC1,FBJOBP		;GET THE JOB NUMBER
	CAIN	AC1,(J)			;SAME AS US?
	JRST	FBPHY2			;YES. OWNER HAS READ&WRITE ACCESS.
	LDB	AC1,FBPROT		;GET THE PROTECTION CODE.
	DPB	AC1,[POINT 2,TAC,2]	;STUFF THE PROT CODE.
	JRST	STOTAC			;RETURN DATA TO USER.

RTZERO:	LDB	UCHN,PUUOAC
	XCTR	XW,[SETZM (UUO)]
	POPJ	P,
;UUO TO TELL YOU IF YOU HAVE A TRANSFER IN PROGRESS
; CALLING . . .
;	CALL [SIXBIT /UFBSKP/]
;	<ONE IN PROGRESS>
;	<NO TRANSFER IN PROGRESS>

↑FBSKP:	MOVEI	AC1,FBINP		;CHECK TRANSFER IN PROGRESS BIT
	TDNN	AC1,JBTSTS(J)		;FROM JBTSTS.
	AOS	(P)			;NONE IN PROGRESS
	POPJ	P,

;UUO TO WAIT FOR A TRANSFER IN PROGRESS
; CALLING . . .
;	CALL [SIXBIT /FBWAIT/]

↑FBWT:	PUSHJ	P,FBSKP			;IS THERE A TRANSFER IN PROGRESS.
	JRST	FBCW			;YES. WAIT NOW FOR IT TO FINISH
	POPJ	P,			;NO TRANSFER IN PROGRESS. 

; UUO TO TELL YOU IF THE LAST TRANSFER GOT AN ERROR.
; CALLING . . .
;	CALL [SIXBIT /UFBERR/]
;	<ERROR OCCURRED>

↑FBERR:	MOVEI	AC1,FBERP		;TEST THE ERROR BIT FROM JBTSTS
	TDNN	AC1,JBTSTS(J)
	AOS	(P)
	POPJ	P,
;ROUTINE TO GET A BAND AT ANY LEVEL
; CALLING . . .
;	MOVE UCHN,<LOGICAL BAND NUMBER, 0-31>
;	MOVE ITEM,<JOB NUMBER THAT IS CLAIMING THE BAND>
;	PUSHJ PDP,FBGET
;	<RETURNS HERE IF NONE LEFT>
; RETURNS PHYSICAL BAND NUMBER IN TAC

↑FBGET:	SKIPN	FBACT		;ARE FAST BANDS THERE TODAY?
	POPJ	P,		;NO.
	PUSHJ	P,FBGIVE	;GIVE BACK IF WE HAVE THIS LOGICAL ONE ALREADY.
	MOVE	AC3,[XWD -NBANDS,FBBAND]
FBGET1:	SKIPN	(AC3)		;IS THIS BAND FREE?
	JRST	FBGET3		;YES. CLAIM THIS.
	AOBJN	AC3,FBGET1	;THIS ONE IS IN USE, TRY NEXT ONE
	MOVE	AC3,[XWD -NBANDS,FBBAND]
FBGET2:	MOVEI	TAC,77
	AND	TAC,(AC3)	;PICKUP JOB NUMBER FIELD.
	JUMPE	TAC,FBGET3	;JOB NUMBER IS ZERO. WE'LL CLAIM IT.
	AOBJN	AC3,FBGET2
	POPJ	P,		;THERE ARE NONE LEFT.

FBGET3:	DPB	J,FBJOBP	;STORE JOB NUMBER.
	TRNN	UCHN,400000	;DON'T SET LOGICAL NUMBER IF PHYSICAL
	DPB	UCHN,FBLOGP	;PUT LOGICAL BAND NUMBER IN PLACE
	MOVEI	TAC,400000-FBBAND(AC3)
	AOS	(P)
	POPJ	P,

FBSEARCH:
	MOVE	AC3,[XWD -NBANDS,FBBAND]	;LOAD UP AOBJN POINTER
FBSEA1:	SKIPLE	AC1,(AC3)	;IS THIS BAND CLAIMED?
	JRST	FBSEA2		;BAND IS CLAIMED.
FBRESEARCH:
	AOBJN	AC3,FBSEA1
	POPJ	P,

FBSEA2:	ANDI	AC1,77		;GET THE JOB NUMBER FIELD ONLY!
	CAIN	AC1,(J)		;BELONGS TO THIS JOB?
	JRST	CPOPJ1		;YES.
	JRST	FBRESEARCH
;ROUTINE TO RELEASE A BAND AT ANY LEVEL
; CALLING . . .
;	MOVE UCHN,<LOGICAL BAND NUMBER>
;	MOVE ITEM,<JOB NUMBER THIS BAND BELONGS TO>
;	PUSHJ PDP,FBGIVE

↑FBGIVE:SKIPE	FBACT		;FAST BANDS TODAY?
	PUSHJ	P,FBSEARCH	;YES. LOOK FOR A BAND FOR THIS JOB.
	POPJ	P,		;NONE THERE OR NO FAST BANDS.
FBGIV1:	TRNE	UCHN,400000	;IS THIS A PHYSICAL NUMBER?
	JRST	FBGIV3		;YES.
	LDB	AC1,FBLOGP	;IS THIS THE BAND WE WANT?
	CAME	AC1,UCHN
	JRST	FBGIV2		;NOPE.
FBGIV4:	LDB	AC1,FBLUZP	;PRESERVE THE LOSE COUNT.
	SETZM	(AC3)		;YES, CLEAR IT OUT
	DPB	AC1,FBLUZP
	POPJ	P,

FBGIV3:	CAIN	UCHN,400000-FBBAND(AC3)		;PHYSICAL NUMBER THE SAME?
	JRST	FBGIV4
FBGIV2:	PUSHJ	P,FBRESEARCH	; NO, TRY FOR ANOTHER ONE
	POPJ	P,
	JRST	FBGIV1

;;ROUTINE TO FLUSH ALL A JOB'S BANDS
; CALLING . . .
;	MOVE ITEM,<JOB NUMBER>
;	PUSHJ PDP,FBFLUSH

↑FBFLUSH:
	HRRZS	JBTSWP(J)
	HRRZS	JB2SWP(J)
	SKIPN	FBACT
	POPJ	P,		;NO FAST BANDS ACTIVE. 
	PUSHJ	P,FBSEARCH	;LOOK FOR BANDS BELONGING TO ME.
	POPJ	P,
	PUSH	P,TAC
FBFLU1:	LDB	TAC,FBLUZP	;FLUSH THIS BAND
	SETZM	(AC3)
	DPB	TAC,FBLUZP
	PUSHJ	P,FBRESEARCH	;SEARCH FOR ANOTHER ONE
	JRST	TPOPJ		;NONE.
	JRST	FBFLU1
;ROUTINES TO READ AND WRITE A FAST BAND
; CALLING . . .
;	MOVE TAC,<CORE ADDRESS, INDEXED BY PROG IF FOR A USER>
;	MOVE UCHN,<LOGICAL BAND NUMBER>
;	MOVE AC2,<WORD COUNT AS A POSITIVE NUMBER>
;	MOVE TAC1,<DISK ADDRESS, LESS THAN 1216 DECIMAL>
;	MOVE ITEM,<JOB NUMBER>
;IF AT CLOCK LEVEL, MUST INCLUDE ONE MORE PARAMETER . . .
;	MOVE DAT,<CLOCK LEVEL ADDRESS TO JUMP TO WHEN TASK DONE>
;	PUSHJ P,FBWRITE   OR   PUSHJ P,FBREAD

; SKIPS UPON SUCCESSFUL COMMENCEMENT OF OPERATION AT ALL LEVELS
; AT UUO LEVEL, RETURNS WHEN OP COMPLETE AND SKIPS ON SUCCESSFUL EXECUTION
; AT CLOCK LEVEL, RETURNS TO ADDRESS IN DAT WITH ERROR BITS IN TAC, OR ZERO IF SUCCESSFUL

↑FBWRITE:
	PUSHJ	P,FBWRT
	POPJ	P,
	CONO	PI,DSKON
	JRST	CPOPJ1

FBWRT:	MOVEI	IOS,WREN
	PUSHJ	P,FBSET
	MOVN	AC3,AC3
	PUSHJ	P,FBCOM
	JRST	CPOPJ1

; READ A BAND
; SAME CALLING SEQUENCE AS IN FBWRITE

↑FBREAD:
	PUSHJ	P,FBRD
	POPJ	P,
	CONO	PI,DSKON
	JRST	CPOPJ1

FBRD:	MOVEI	IOS,RDEN
	PUSHJ	P,FBSET		; GET PHYSICAL BAND NUMBER FROM LOGICAL NUMBER
	PUSHJ	P,FBCOM
	JRST	CPOPJ1
;THIS ROUTINE GETS THE PHYSICAL BAND NUMBER FROM THE LOGICAL BAND NUMBER
; IN ACCUMULATOR UCHN AND THE JOB NUMBER IN ITEM. IF THE BAND IS NOT INITIALIZED,
; THE ROUTINE POP'S OFF THE RETURN AND POPJ'S BACK. IF THE BAND IS FOUND, THE
; PHYSICAL BAND NUMBER IS PUT IN AC3.

FBSET:	SKIPN	FBACT		;ANY FAST BANDS TODAY?
	JRST	TPOPJ
	TRNE	UCHN,400000	;IS THIS A PHYSICAL BAND?
	JRST	FBSET3		;YES.
	PUSHJ	P,FBSEARCH	;SEARCH FOR THE LOGICAL BAND HE REQUESTED
	JRST	TPOPJ		;ERROR - HE HAS NOT ASSIGNED THAT BAND YET
FBSET1:	LDB	AC1,FBLOGP	;THIS BAND BELONG TO THIS JOB. GET LOGICAL NUMBER
	CAIN	AC1,(UCHN)	;IS THIS THE RIGHT LOGICAL BAND?
	JRST	FBSET4		;YES. SAME LOGICAL BAND.
	PUSHJ	P,FBRESEARCH	;NO, FIND NEXT BAND IN HIS NAME
	JRST	TPOPJ		;ERROR. LOGICAL BAND NUMBER NOT INITIALIZED
	JRST	FBSET1		;GO TEST THIS BAND.

FBSET3:	MOVEI	AC3,FBBAND-400000(UCHN)	;GET POINTER TO PHYSICAL BAND.
	LDB	AC1,FBJOBP	;GET THE JOB NUMBER OF BAND OWNER.
	ANDI	UCHN,177	;CLEAN OUT THE SHIT
	MOVE	TEM,JBTPRV(J)	;GET PRIVILEGES.
	TLNN	TEM,FBWPRV	;DOES THIS GUY HAVE ACCESS?
	CAIN	AC1,(J)		;OR IS THIS THE OWNER?
	JRST	FBSET4		;YES. OPERATION PROCEEDES.
	CAMN	UCHN,SYSBND	;DOES HE WANT THE SYSTEM BAND?
	JRST	FBSYSB		;YES. GO BLESS HIM
	LDB	AC1,FBPROT	;
	SKIPL	(AC3)		;SKIP IF BAD BAND.
	TDNN	AC1,IOS		;CHECK PROTECTION BITS
	JRST	TPOPJ		;ACCESS IS NOT ALLOWED.
FBSET4:	MOVEI	AC3,-FBBAND(AC3);GET PHYSICAL NUMBER IN AC3
	HRRZ	TAC1,TAC1	;ZERO LEFT SIDE OF TAC1
	CAMN	AC3,SYSBND	;IS THIS THE SYSTEM BAND?
	CAIE	IOS,WREN	;YES. WRITING ON SYSBAND?
	POPJ	P,		;NO.
;	SETZM	SYSTHERE	;THE SYSTEM IS NOW CLOBBERED
	POPJ	P,


FBSYSB:	CAIE	IOS,WREN	;IS HE WRITING ON SYSTEM BAND?
	JRST	FBSET4		;NO. ANYONE MAY READ
	JRST	TPOPJ		;SCREW HIM.

↑FBTVIN:
	SETOM	TAC1		; FLAG TV REQUEST WITH -1 DISK ADDRESS
	PUSHJ	P,FBCOM		; FROM HERE ON OUT, TREAT AS A STANDARD REQUEST
	CONO	PI,DSKON
	POPJ	P,
;COMMON READ-WRITE ROUTINE

FBCOM:	PUSH	P,AC3			;SAVE BAND NUMBER ON STACK
	MOVEI	AC3,FBSIZ		;GET A TASK BLOCK FROM FREE STORAGE
	PUSHJ	P,FSGET
	JRST	FBCOM5			;OOPS. WE'LL HAVE TO USE THE SPARE.
FBCOM3:	MOVEM	TAC,FBADR(AC1)		;LOAD UP THE TASK BLOCK WITH GOOD STUFF
					;IN CASE OF TV THIS IS COMMAND BLOCK ADDRESS
	MOVEM	AC2,FBWC(AC1)		;THE WORD COUNT
	MOVEM	TAC1,FBDA(AC1)		;THE DISK SECTOR ADDRESS 
					;(BAND AND TRACK IS ADDED IN AT I-LEVEL)
					;(-1 FOR TV CALL)
	MOVEM	J,FBJOB(AC1)		; SAVE JOB NUMBER FOR UUO-LEVEL CALLS
	MOVEI	DSER,=10		; ONLY TEN RETRIES
	MOVEM	DSER,FBRETRY(AC1)
	POP	P,FBBND(AC1)		;STORE PHYSICAL BAND NUMBER 
	MOVEM	DAT,FBDONE(AC1)		;CLOCK LEVEL ADDRESS WHEN TASK DONE
	CONSZ	PI,1⊗(17-CLKCHN)	;NOW, ARE WE AT UUO LEVEL?
	JRST	FBCOM2			;WE ARE AT CLOCK LEVEL.
	JUMPL	TAC1,FBCOM2		;TV CALLS HAVE ALREADY LOCKED JOB.
	AOS	JBTGLU(J)		;PIN DOWN THIS JOB.
IFN FTSTAT,<PUSHJ P,GLUSTT>
	MOVNI	DSER,IOWQ		;SET US INTO THE WAIT QUEUE NOW
	SKIPN	FBDONE(AC1)		;AVOID REQUEING IF DOING NO-WAIT UUOS
	MOVEM	DSER,JOBQUE(J)
FBCOM2:	MOVEI	TEM,DSKSTART		;READY FOR I-LEVEL. GET STARTUP DISPATCH
	CONO	PI,DSKOFF		;TURN OFF THE DISK.
	HLRZ	DSER,FBQUE		;ADD OUR TASK TO THE END OF THE TASK LIST
	SKIPE	DSER			;LH OF FBQUE POINTS TO LAST TASK IN LIST,
					; RH TO FIRST
	MOVEM	AC1,FBLINK(DSER)	;LINK FROM THE LAST TASK TO THIS TASK
	HRLM	AC1,FBQUE		;UPDATE POINTER TO END OF LIST
	SKIPN	DSER
	HRRM	AC1,FBQUE		;IF ONLY TASK, UPDATE POINTER TO FIRST TASK
	SETZM	FBLINK(AC1)		;SINCE WE ARE THE LAST TASK, ZERO OUR LINK
	SKIPL	FBBUSY			;IS THE DISK BUSY NOW?
	POPJ	P,			;YES, WE DO NOT HAVE TO START IT UP
	MOVEM	TEM,FBBUSY		;NO. STORE DISPATCH LOCATION
	MOVEI	TEM,IOPANY!IOPJDN	;RESET CH6 CONSZ BITS
	HRRM	TEM,DIPCON		;
	CONO	IOP,IOPJDN!DSKCHN	;SET JBDN TO MAKE A STARTUP INTERRUPT.
	POPJ	P,

FBCOM5:	SKIPE	FBSBUSY			;NO SYSTEM FS LEFT. USE OUR SPARE!
	HALT	FBCOM4			;SPARE BUSY, CAN'T HAPPEN.
FBCOM4:	SETOM	FBSBUSY			;SET SPARE BUSY.
	MOVEI	AC1,FBSPARE
	JRST	FBCOM3
;INTERRUPT LEVEL CODE . . .

↑IFBINT:
	BEGIN	IFBINT
	JSR	DSKSAV		;SAVE AC'S.
IFBIN1:	SKIPGE	AC1,FBBUSY	;PICK UP THE DISPATCH ADDRESS.
				;THIS IS -1 IF DISK IDLE
	JRST	UNIOP		;UNEXPECTED INTERRUPT.
	SETOM	FBBUSY		;DISK NOW IDLE.
				;INITIALIZE DISPATCH ADDRESS AND DISPATCH!
	JRST	(AC1)		;DISPATCH.

UNIOP:	PUSHACS
	PUSHJ	P,DISDATE
	PUSHJ	P,DISMES
	ASCIZ	/ππUNEXPECTED IOP INTERRUPT
/
	POPACS
IOPIN1:	CONO	IOP,DSKCHN
	SETZM	FBTASK		;FLUSH CURRENT TASK.
	POPJ	P,

↑↑DFBINT:
	CONO	DSK,0		;STOP THE DISK, I WANT TO GET OFF!
	ROT	44		;WAIT FOR THE IOP TO COOL OFF. LONG NO-OP
	JSR	DSKSAV		;SAVE AC'S.
	CONO	IOP,DSKCHN	;SET UP IOP WITH PI CHANNEL.
	EXCH	AC1,FBBUSY	;ARE WE BUSY NOW?
	CAME	AC1,[-1]	;
	JRST	DFBGO		;WE WERE BUSY.
DFBFLS:	EXCH	AC1,FBBUSY	;PUT AC1 BACK.
	CONO	DSK,1B23!1B24!DSKCHN	;CLEAR ERROR BITS AND SET PI CHANNEL
	POPJ	P,		;AND RETURN.

DFBGO:	EXCH	AC1,FBBUSY	;RESTORE AC1
	CONSO	DSK,1B27	;IS DISK ON LINE?
	JRST	IFBIN1		;YES. GO PROCESS INTERRUPT.
	PUSHACS
	PUSHJ	P,DISDATE
	PUSHJ	P,DISMES
	ASCIZ	/ππUNEXPECTED LIBRASCOPE INTERRUPT
/
	POPACS
	JRST	DSKSTART
;FIRST, THE DISK STARTUP ROUTINE . . .

↑DSKSTART:
	HRRZ	AC1,FBQUE	;POP THE FIRST TASK OFF THE TASK LIST
	JUMPE	AC1,IOPIN1	;NOTHING THERE, DISMISS INTERUPT AND LEAVE
	MOVE	DSER,FBLINK(AC1);LINK AROUND THE BLOCK
	HRRM	DSER,FBQUE	;THIS IS NEW TOP OF LIST
	SKIPN	DSER		;IF THE TOP ELEMENT IS THE BOTTOM TOO . . .
	SETZM	FBQUE		;THEN ZERO BOTH FORWARD AND BACKWARD POINTERS
	MOVEM	AC1,FBTASK	;NOW SAVE THE ADDRESS OF THIS TASK BLOCK
	MOVE	TAC1,FBDA(AC1)	;PICK UP THE SECTOR ADDRESS
	AOJN	TAC1,DSKGOA	;JUMP UNLESS A TV TRANSFER
	HLLZS	DIPCON		;FIRST MAKE SURE WE WON'T GET THE INTERRUPT
	SETZM	FBBUSY		;MAKE SURE THE WORLD KNOWS WE ARE BUSY
	JRST	TVRED		;OFF TO TVSER.

DSKGOA:	AOS	NLREQS		;
DSKGO:	SETZ	TAC1,
	AOS	NLRERS
	MOVM	TEM,FBBND(AC1)	;DEPOSIT PHYSICAL BAND NUMBER IN
				;BITS 14-23 OF THE DISK DATAO WORD
	DPB	TEM,[POINT 8,TAC1,23]
	SETZ	DSER,
	CAMN	TEM,SYSBND	;SYSTEM?
	JRST	DSKST2		;YES, USE ZERO OFFSET
	HLRZ	DSER,FBBAND(TEM);SEE IF THE SECTOR OFFSET IS INITIALIZED YET
	JUMPN	DSER,DSKST2	;YES IT IS, SKIP OVER THIS PART
DSKST3:	DATAI	DSK,DSER	;ON FIRST WRITEOUT, WE CAN JUST WRITE ANYWHERE
	TRNE	DSER,4000	;GET THE CURRENT SECTOR NUMBER.
	JRST	DSKST3		;SECTOR NUMBER INVALID
	ADDI	DSER,10		;BUMP WHERE WE ARE BY 10 SECTORS FOR SAFETY
	HRLM	DSER,FBBAND(TEM);AND STORE THAT AS OUR SECTOR OFFSET
DSKST2:	ANDI	DSER,3777	;CLEAN IT UP
	ADD	DSER,FBDA(AC1)	;ADD IN USER'S REQUESTED SECTOR OFFSET
	CAIGE	DSER,=1216	;IF TRACK OVERRUN, BUMP TRACK NUMBER AND RESET SECTOR COUNT MOD 1216
	JRST	DSKST1
	CAIGE	DSER,=2432
	JRST	DSKST4
	SUBI	DSER,=2432
	JRST	DSKST1

DSKST4:	TRO	TAC1,1B24	;DISK STARTUP ROUTINE, SET COUNT AND START DISK
	SUBI	DSER,=1216
DSKST1:	IOR	TAC1,DSER	;NOW COMBINE BAND NUMBER, TRACK NUMBER, AND SECTOR ADDRESS
	MOVN	AC2,FBWC(AC1)	;NOW START BUILDING THE IOP DATAO WORD WITH THE WORD COUNT
	MOVS	AC2,AC2		;IN THE LEFT HALF, OF COURSE
	HRR	AC2,FBADR(AC1)	;SO LET US RELOCATE IT PROPERLY
	SETZM	DSER
	SKIPGE	FBBND(AC1)	; SET BIT 100 IN DSER IF THIS IS A WRITE OPERATION
	MOVEI	DSER,100	; OUR BAND IS SET NEGATIVE IF THAT IS TRUE
	CONO	DSK,1B23!1B24!DSKCHN
	CONO	IOP,DSKCHN(DSER); GIVE THE 167 A CHANNEL AND A READ-WRITE BIT
	DATAO	IOP,AC2		; GIVE IT A WORD COUNT AND A MEMORY ADDRESS
	MOVEM	AC2,LASTWC	; STORE LAST WC SENT
	MOVEM	AC2,30		; STORE IT SO WE CAN SEE IT WHEN MEMORY HANGS.
	JFCL			; WELL, IF DAVE SAYS SO . . .
	MOVEM	TAC1,LASTADR	; SAVE THIS FOR ERROR TYPEOUT
	DATAO	DSK,TAC1	; NOW THE DISK ADDRESS AND WE ARE OFF!
	MOVEI	AC1,FINOP	; SET FINOP AS OUR DISPATCH ADDRESS ON THE NEXT TRANSFER
	MOVEM	AC1,FBBUSY
	POPJ	P,		; DISMISS INTERRUPT AND WAIT
;COME HERE WHEN A TASK HAS BEEN COMPLETED . . .

FINOP:
	MOVE	AC1,FBTASK		; PICK UP ADDRESS OF TASK BLOCK
	CONSZ	DSK,3770		; WAS THERE A RED LIGHT ERROR LAST TIME?
	JRST	DSKERR			; YES, GO PROCESS IT (NEXT PAGE)
	CONSZ	IOP,IOPANY		; DO THE SAME FOR IOP ERRORS
	JRST	IOPERR
FINOP1:	SKIPG	DSER,FBRETRY(AC1)	; ANY ERRORS?
	AOS	NLERRS			; YES, BUMP COUNT	
	JUMPLE	DSER,FINCNT		; SKIP IF HARD ERROR
	CAIGE	DSER,=10		; ANY SUCCESSES AFTER ERROR RETRIES?
	AOS	NSAERR			; YES, COUNT IT
FINCNT:	SKIPN	DSER,FBDONE(AC1)	; FORK FOR UUO AND CLOCK LEVEL CALLS
	JRST	FINOP2			;UUO WAIT TYPE.

;;COME HERE TO COMPLETE A CLOCK LEVEL CALL . . .

	SKIPG	FBRETRY(AC1)		; GIVE HIM SOME ERROR BITS TOO
	TRO	DSER,400000
	CONO	PI,PIOFF
	IDPB	DSER,CLKQ		; MAKE CLOCK QUEUE REQUEST
	CONO	PI,PION
FINOP3:	CAIE	AC1,FBSPARE		; IS THIS THE SPARE?
	JRST	FINOP5			; NO. ORDINARY FS BLOCK
	SETZM	FBSBUSY			; YES, RELEASE IT.
	JRST	DSKSTART		; PROCESS NEXT TASK.
FINOP5:	PUSHJ	P,FSGIVE		; NOW RELEASE THIS PIECE OF FREE STORAGE
	JRST	DSKSTART		; AND GO SCAN FOR ANY MORE TASKS

;;HERE TO COMPLETE A UUO LEVEL CALL . . .

FINOP2:	MOVE	J,FBJOB(AC1)		; PICK UP JOB NUMBER
	SOS	JBTGLU(J)		; FREE HIM IN CORE
IFN FTSTAT,<PUSHJ P,GLUSTT>
	MOVM	AC1,JOBQUE(J)		; STILL IN IOW?
	CAIE	AC1,IOWQ
	JRST	DSKSTART		; NO, DON'T REQUE HIM
	MOVEI	AC1,RUNQ		; YES, PUT HIM IN RUN QUEUE
	MOVNM	AC1,JOBQUE(J)
	PUSHJ	P,REQUE
	JRST	DSKSTART		; NOW GO SCAN FOR FURTHER TASKS TO BE DONE
					;TASK BLOCK WILL BE GIVEN BACK AT 
					;UUO LEVEL (SEE FBCOM1)
;HERE AFTER THE TV CAMERA INTERRUPT HAS GONE OFF.
;RESET DIPCON, OUR CONSZ LOCATION, AND GIVE THE TASK BLOCK BACK.

↑↑FBDFINT:
	MOVEI	AC1,IOPANY!IOPJDN	; CLEAN UP AFTER TV HAS DONE ITS THING
	HRRM	AC1,DIPCON
	MOVE	AC1,FBTASK		; NOW RELEASE THE TASK BLOCK
	SETOM	FBBUSY			; AND MAKE THE SWAPPER FREE AGAIN
	JRST	FINOP3
;DISK ERROR HANDLER.

DSKERR:	SKIPE	AC1,FBTASK		;GET THE TASK BLOCK POINTER
	JRST	DSKERA			;WE HAVE ONE.
	PUSHACS
	PUSHJ	P,DISDATE		;NO TASK BLOCK. WHAT ARE WE DOING HERE?
	PUSHJ	P,DISMES
	ASCIZ	/πππLIBRASCOPE ERROR WHILE IT WAS IDLE

/
	POPACS
	JRST	DSKSTART		;ATTEMPT TO PROCESS MORE TASKS.

DSKERA:	SOSLE	FBRETRY(AC1)		;HAVE WE TRIED ENOUGH?
	JRST	DSKGO			;NO. TRY SOME MORE.
	PUSHACS
	MOVM	AC3,FBBND(AC1)		;GET THE BAND NUMBER
	ADDI	AC3,FBBAND
	LDB	AC1,FBLUZP		;GET THE LOSE COUNT.
	ADDI	AC1,1
	SETZM	(AC3)
	DPB	AC1,FBLUZP
	CAILE	AC1,7
	SETOM	(AC3)			;FORCE A PERMANENT BAD BAND.
	PUSHJ	P,DISERR
	[ASCIZ	/ππLIBRASCOPE ERROR.
LASTADR = /]
	DISARG(OCT,LASTADR)	;HAS SECTOR, BAND, AND TRACK
	[ASCIZ/    LASTWC = /]
	DISARG(OCT,LASTWC)	;WCMA
	[ASCIZ/    WCMA = /]
	-1
	DATAI	IOP,TAC
	PUSHJ	P,DISOCT		;PRINT OUT CURRENT WCMA
	PUSHJ	P,DISMES
	ASCIZ	/
DISK BITS = /
	CONI	DSK,TAC
	PUSHJ	P,DISLOC
	PUSHJ	P,DISMES
	ASCIZ	/    IOP BITS = /
	CONI	IOP,TAC
	PUSHJ	P,DISLOC
	PUSHJ	P,DISCRLF
	PUSHJ	P,DISCRLF
	CONSO	DSK,1B31		;WRITE ERROR?
	JRST	DSKERB			;NO. WE'VE DONE ENOUGH.
	PUSHJ	P,DISMES
	ASCIZ	/WRITE ERRORS. CALL PANOFSKY RIGHT NOW! DO NOT RELOAD!
/
	SETOM	DISFLAG			;FORCE TYPEOUT
	PUSHJ	P,DISFLUSH
	SKIPN	INDDT			;IF DDT IS NOW IN, CALL IT
	HALT	DSKERB			;OTHERWISE, JUST HALT
	PUSHJ	P,DDTCALL		;CALL DDT (IF THERE)
DSKERB:	POPACS				;RESTORE AC'S AND RETURN.
	JRST	FINOP1
;IOP ERROR RECOVERY

IOPERR:	SKIPE	AC1,FBTASK
	JRST	IOPERA
	PUSHACS
	PUSHJ	P,DISDATE
	PUSHJ	P,DISMES
	ASCIZ	/ππIOP ERROR WHILE DISK WAS IDLE

/
	POPACS
	JRST	DSKSTART

IOPERA:	CONI	IOP,TAC
	DATAI	IOP,IOPWCM	;SAVE IOP WCMA.
	MOVE	DSER,IOPWCM
	SUB	DSER,FBADR(AC1)	;ADR FROM START OF XFER
	MOVEI	DSER,-1(DSER)	;OFF BY AT LEAST 1, ALSO FLUSH WC
	TRNE	DSER,36		;MORE THAN 2 WORDS IN?
	SOJ	DSER,		;YES, EARLY RQ MKES US OFF BY 2
	ADD	DSER,FBADR(AC1)	;PUT ORG BACK - SHOULD NOW BE EXACT ADR
	CONO	DSK,0		; CLEAR ANY ERROR BITS WHAT MAY BE
	CONSO	IOP,IOPMIS	;IGNORE PAR ERR WITH DATA MISS
	CONSO	IOP,IOPPAR	;PARITY ERROR?
	JRST	PARIOP		;NO.
	MOVE	TEM,-1(DSER)	;CAST ABOUT LOOKING FOR BAD PARITY.
	MOVE	TEM,1(DSER)	;LOOK HERE TOO.
	MOVE	TEM,(DSER)	;REFERENCE IT TO CALL PARSER
	CONO	IOP,0		;SET TO READ
	DATAO	IOP,[IOPWRD]	;INTO THIS CELL
	CONO	IOP,2200	;SET RDY & BRRQ, WHICH WILL STORE BR
	PUSHACS
	PUSHJ	P,DISDAT
	PUSHJ	P,DISERR
	[ASCIZ	/IOP PARITY ERROR, LOC /]
	DISARG	LOC,<DSER-20(P)>
	[ASCIZ	/  BR=/]
	DISARG	OCT,IOPWRD
	[ASCIZ	/, C(LOC)=/]
	DISARG	OCT,<TEM-20(P)>
	[ASCIZ	/
LASTWC=/]
	DISARG	OCT,LASTWC
	[ASCIZ	/  IOP CONI = /]
	DISARG	LOC,<TAC-20(P)>
	[ASCIZ	/   FBRETRY = /]
	-1
	MOVE	TAC,AC1-17(P)	;GET REAL AC1 INTO TAC
	MOVE	TAC,FBRETRY(TAC)
	PUSHJ	P,DISDCP
	PUSHJ	P,DISMES
	BYTE(7)15,12,12		;CR,LF,LF,LF
	POPACS
PARIOP:	TRNE	TAC,100		;I OR O
	JRST	NFBINP		;NOT INPUT
	SETZM	(DSER)		;FIX BAD PARITY WHICH DATA MISS CAN MAKE
	HRRZ	TEM,LASTWC	;GET START OF TRANSFER
	CAILE	TEM,-1(DSER)	;IS PREVIOUS WORD IN TRANSFER?
	SETZM	-1(DSER)	;YES, CLEAR IT ALSO
	CAILE	TEM,-2(DSER)	;HOW ABOUT THIS ONE?
	SETZM	-2(DSER)	;YES, CLEAR IT TOO (BETTER SAFE THAN SORRY)
NFBINP:	TRNE	TAC,IOPRLY	;IOP EARLY RESPONSE?
	SKIPN	IEARLY		;ARE WE ENABLE FOR THIS PRINTOUT?
	JRST	RLYIOP
	PUSHACS
	PUSHJ	P,DISMES
	ASCIZ	/IOP EARLY RESPONSE   /
	PUSHJ	P,DISDATE
	PUSHJ	P,DISERR
	[ASCIZ	/CONI = /]
	DISARG	LOC,<TAC-20(P)>
	[ASCIZ	/;  LASTWC = /]
	DISARG	OCT,LASTWC
	[ASCIZ	/;  WCMA = /]
	DISARG	OCT,IOPWCM
	[ASCIZ	/

/]
	-1
	POPACS
RLYIOP:	SOSLE	FBRETRY(AC1)
	JRST	DSKGO
	MOVEI	DSER,=10
	MOVEM	DSER,FBRETRY(AC1)
	PUSHACS
	PUSHJ	P,DISDATE
	PUSHJ	P,DISERR
	[ASCIZ	/IOP ERROR; CONI = /]
	DISARG	LOC,<TAC-20(P)>
	[ASCIZ	/;  LASTWC = /]
	DISARG	OCT,LASTWC
	[ASCIZ	/;  WCMA = /]
	DISARG	OCT,IOPWCM
	[ASCIZ	/

/]
	-1
	POPACS
	JRST	DSKGOA

BEND IFBINT
BEND FBPACK
>
