COMMENT ⊗   VALID 00005 PAGES
C REC  PAGE   DESCRIPTION
C00001 00001
C00002 00002	BEGIN PARSER ↔	SUBTTL	PARSER - PARITY ERROR SERVICE ROUTINE
C00006 00003		SUBTTL	HERE WE SEARCH FOR REAL ERRORS.
C00012 00004		SUBTTL	HERE WHEN A REAL ERROR IS FOUND.
C00026 00005		SUBTTL	P2 PARITY ERROR INTERRUPT
C00031 ENDMK
C⊗;
BEGIN PARSER ↔	SUBTTL	PARSER - PARITY ERROR SERVICE ROUTINE
;R. E. GORIN 7 AUG 72.  

AP2CHL←CAT(P2CH,\APRCHN)

↑PARCLK:				;CALLED BY:	SKIPE	PARFLG
					;		PUSHJ	P,PARCLK
	CONO	PI,APROFF		;TURN OFF APR TO AVOID TIMING ERRORS
	SETOM	P2RFLG			;SET SECOND LEVEL FLAG
	SETZM	PARFLG			;CLEAR PRIMARY FLAG
	JRST	PARIN0			;JOIN PARITY ERROR INTERRUPT CODE

↑PARINT:				;HERE FROM APR CHANNEL FOR P1 PARITY ERROR,
	CONO	PI,APROFF		;TURN OFF APR SO WE CAN TEST FOR BAD PARITY.
PARIN0:	MOVEM	P,PARPSAV		;ASSUME WE HAVE NO AC'S.
	MOVE	P,APRPDL		;GET A STACK.
	PUSHACS				;SAVE ALL THE AC'S
	MOVEI	PID,P1PID		;SET PROCESSOR IDENTIFICATION
	PUSHJ	P,DISCRLF		;START STUFFING THE TYPEOUT BUFFER
	PUSHJ	P,DISDATE		;ANNOUNCE THE DATE AND TIME
	SKIPN	P2RFLG			;IS THE PDP-6 HALUCINATING AGAIN?
	JRST	PARIN1			;NO IT MUST BE P1

	PUSHJ	P,DISMES		;BLAME ON THE STONES
	ASCIZ	/πππππPDP-6 DETECTED PARITY ERROR.  PC  = /
	MOVE	TAC,AP2CHL		;GET THE PC OF PDP-6'S ERROR.
	TLNE	TAC,USRMOD		;IS THIS IN USER MODE?
	TRNN	TAC,777760		;YES. IS THIS ABOVE THE AC'S
	JRST	PARIN3			;EXEC MODE OR RUNNING IN THE AC'S
	HRRZ	TAC1,LASTPR+P2PID	;GET CURRENT RELOCATION DATA
	ANDI	TAC1,776000		;LOWER PART OF THE RELOCATION ONLY
	ADDI	TAC,(TAC1)		;ADD RELOCATION
	JRST	PARIN3			;SAVE ERROR PC AND PRINT IT.

PARIN1:	PUSHJ	P,DISMES		;HERE FOR P1 PARITY ERROR
	ASCIZ	/πππππPARITY ERROR.  PC = /
	MOVE	TAC,APRCHL		;GET THE PC FROM 
	TLNE	TAC,USRMOD		;IS THIS IN USER MODE?
	TRNN	TAC,777760		;YES. IS THIS ABOVE THE AC'S
	JRST	PARIN3			;EXEC MODE OR RUNNING IN THE AC'S
	TRNN	TAC,400000		;POSSIBLE UPPER?
	JRST	PARIN2			;NO THIS HAS TO BE A LOWER.
	HRRZ	TAC1,APRCHL		;GET THE USER MODE PC.
	HLRZ	AC3,LASTPR+P1PID	;GET THE CURRENT PROTECTION
	TRO	AC3,1777		;TURN ON LOW ORDER BITS.
	CAIG	TAC1,(AC3)		;IS THIS PC IN THE LOWER?
	JRST	PARIN2			;YES
	CAIGE	AC3,400000		;IS THE LOWER GREATER THAN 128K (HA HA)
	MOVEI	AC3,400000		;NO. THIS IS THE NUMBER TO SUBTRACT FROM PC
	SUBI	TAC,(AC3)		;LEAVING RELATIVE PC IN UPPER
	HRRZ	AC3,LASTPR+P1PID	;GET THE RELOCATION
	LSH	AC3,=9			;SHIFT IT TO SELECT RELOC OF UPPER.
	ANDI	AC3,776000		;MASK
	TRC	AC3,400000		;UN-BUGGER IT -- RPH 2-7-73
	ADDI	TAC,(AC3)		;ADD IT TO THE PC.
	MOVEM	TAC,ERRPC		;SAVE ERROR PC.
	PUSHJ	P,DISMES
	ASCIZ	/#/			;DENOTE BY THIS A PC IN THE UPPER
	JRST	PARIN4

	SUBTTL	HERE WE SEARCH FOR REAL ERRORS.
PARIN2:	HRRZ	TAC1,LASTPR+P1PID	;GET CURRENT RELOCATION DATA
	ANDI	TAC1,777000		;LOWER PART OF RELOCATION
	ADDI	TAC,(TAC1)		;ADD RELOCATION
PARIN3:	MOVEM	TAC,ERRPC		;SAVE ERROR PC.
PARIN4:	PUSHJ	P,DISOCT		;WRITE THE ERROR PC
	PUSHJ	P,DISCRLF		;AND A CRLF

	CONO	PI,@PARCON		;TURN OFF ERROR FLAG.
	SETOM	ERRLOC			;SET TO SIGNIFY NONE FOUND YET.
	SETOM	LASLOS			;JOB NUMBER OF LAST LOSER FOUND.
	SETZB	TAC1,PARSJN
	SETZM	SYSERR			;ASSUME NO ERRORS SYSTEM CORE.
	MOVE	TAC,ERRPC		;GET THE ERROR PC
	TLNE	TAC,USRMOD		;USER MODE?
	JRST	PARIN5			;YES.
	SETOM	SYSERR			;EXEC MODE. PROBABLE SYSTEM ERROR.
	ANDI	TAC,-1			;PC ONLY
	CAIE	TAC,SHFBLT		;IS THIS THE BLT IN THE SHUFFLER?
	CAIN	TAC,SHFBLT+1		;OR POSSIBLY HERE.
	MOVE	TAC1,PARSJB		;SHUFFLE OPERATION. GET THE JOB NUMBER
	MOVEM	TAC1,PARSJN		;SET FLAG IF A SHUFFLER OPERATION.

PARIN5:	SETZM	ERRJOB			;ZERO OUR TABLE OF LOSING JOBS
	SETZM	ERRJOB+1		;

REPEAT 0,<				;12/3/73
	CONI	APR,TAC			;GET STATE OF SYS WR REF KLUGE
	HRRM	TAC,SYSERR		;SAVE IN RIGHT SIDE OF SYSERR.
	DATAO	PTR,[0]			;DISABLE SYS WR REF KLUGE.
>

	MOVE	TAC1,RMEMSIZ		;GET SIZE OF REAL MEMORY
	CAILE	TAC1,400000		;IS IT SMALL ENOUGH FOR ONE AOBJN?
	MOVEI	TAC1,400000		;NO. WE'LL DO THIS MUCH AT ONCE.
	MOVNI	TAC1,-20(TAC1)		;OFFSET TO SKIP ACS
	HRLZ	TAC1,TAC1		;SWAP COUNT
	HRRI	TAC1,20			;OFFSET PAST ACS
	MOVEI	AC3,@PARCON		;GET THE MASK FOR THE CONO
PARL0:	MOVE	0,(TAC1)		;LOOK AT MEMORY
	CONSO	PI,(AC3)		;SKIP IF ERROR
PARL1:	AOBJN	TAC1,PARL0		;LOOP AND COUNT
	JUMPGE	TAC1,PARL2		;JUMP IF COUNT WAS EXHAUSTED.
	CONO	PI,(AC3)		;SHUT OFF ERROR INDICATOR.
	MOVEM	0,(TAC1)		;STORE GOOD PARITY IN MEMORY
	PUSH	P,TAC1			;HAVE TO SAVE THIS FOR LATER.
	PUSHJ	P,PARERF		;PARITY ERROR FOUND
	POP	P,TAC1			;RESTORE COUNTER
	MOVEI	AC3,@PARCON		;RESTORE CONO MASK
	JRST	PARL1			;RESTORE COUNT AND REJOIN THE LOOP.

PARL2:	MOVE	TAC1,RMEMSIZ		;GET THE SIZE OF OUR MEMORY
	CAIG	TAC1,400000		;IS IT TOO BIG TO HAVE BEEN SEARCHED?
	JRST	PARL5			;SMALL MEMORY HAS ALL BEEN SEARCHED.
	SUBI	TAC1,400000		;LEAVE US WITH COUNT OF HOW MUCH TO LOOK AT
	MOVN	TAC1,TAC1		;NEGATE
	HRLZ	TAC1,TAC1		;SWAP
	HRRI	TAC1,400000		;OFFSET TO UPPER REACHES OF MEMORY
	MOVEI	AC3,@PARCON		;GET MASK FOR CONSO/CONO
PARL3:	MOVE	0,(TAC1)
	CONSO	PI,(AC3)		;ANY ERROR?
PARL4:	AOBJN	TAC1,PARL3		;LOOP
	JUMPGE	TAC1,PARL5		;JUMP IF ALL DONE
	CONO	PI,(AC3)		;SHUT OFF ERROR INDICATORS
	MOVEM	0,(TAC1)		;STORE GOOD PARITY IN MEMORY.
	PUSH	P,TAC1			;SAVE COUNTER
	PUSHJ	P,PARERF		;SERVICE THIS ERROR
	POP	P,TAC1
	MOVEI	AC3,@PARCON		;RESTORE CONSO/CONO MASK
	JRST	PARL4			;AND RETURN TO LOOP

PARL5:	SKIPL	ERRLOC			;HAS THIS BEEN SET UP?
	JRST	PARL6			;YES. WE MUST HAVE PRINTED SOMETHING
	PUSHJ	P,DISMES		;WE DIDN'T FIND ANY.
	ASCIZ	/LOCATION INDETERMINATE
/
	PUSHJ	P,ZSHAD			;ZERO SHADOW MEMORY IN CASE WE LOST THERE.
	JFCL				;SKIPS IF NO FAST ACS
	HRROS	SYSERR			;CHECK THE SYSTEM.   DEPT. OF REDUNDANCY DEPT.
PARL6:
	MOVE	TAC,SYSERR		;ERROR IN SYSTEM CORE?
REPEAT 0,<				;12/1/73
	TRNE	TAC,SWRENB		;WAS SYS WR REF KLUGE ENABLED?
	DATAO	PTR,[1]			;YES. RE-ENABLE IT
>
	JUMPGE	TAC,PARL7		;JUMP IF ERROR WAS NOT IN SYSTEM
	PUSHJ	P,SYSFIX		;JUST IN CASE WE NEED THIS
	JFCL				;NO ERROR
	JFCL				;ERROR AND DIDN'T FIX
					;ALL FIXED.
PARL7:	PUSHJ	P,DISCRLF
	POPACS				;RESTORE ALL THE AC'S THAT WE SAVED
	MOVE	P,PARPSAV		;GET STACK BACK (OR WHATEVER WAS IN IT).
	SKIPN	P2RFLG			;WAS THIS THE PDP-6 HACKING?
	JRST	PARL9			;NO. THIS WAS THE PDP-10
	SETZM	P2RFLG			;CLEAR ERROR FLAG 
	CONO	PI,APRON		;RESTORE INTERRUPT SYSTEM
	POPJ	P,			;RETURN TO P1 CLOCK LEVEL

PARL9:	CONO	PI,APRON		;TURN ON THE APR CHANNEL
	JEN	@APRCHL			;DISMISS THIS INTERRUPT


	SUBTTL	HERE WHEN A REAL ERROR IS FOUND.
PARERF:	MOVE	TAC,ERRLOC		;REMEMBER OLD VALUE OF ERRLOC
	HRRZM	TAC1,ERRLOC		;SAVE PRESENT ERROR LOCATION
	JUMPGE	TAC,PARER1		;JUMP IF THIS IS NOT THE FIRST TIME HERE.
	PUSHJ	P,DISMES		;PUT OUT THE HEADING
	ASCIZ	/LOC	DATA		RELOC	NAME(J)
/
PARER1:	HRRZ	TAC,ERRLOC		;GET LOCATION
	PUSHJ	P,DISLOC		;WRITE LOCATION
	PUSHJ	P,DISTAB		;WRITE A TAB
	HRRZ	TAC,ERRLOC		;GET LOCATION
	MOVE	TAC,(TAC)		;GET DATA
	PUSHJ	P,DISOCH		;WRITE LOSING DATA AS OCTAL HALF WORDS
	PUSHJ	P,DISTAB		;PUT NEXT THING UNDER HEADING
	HRRZ	DSER,ERRLOC		;GET THE LOCATION AGAIN (LOC = DSER)
	PUSHJ	P,CORGBP		;MAKE A BYTE POINTER TO CORTAB
	ILDB	J,TAC			;LOAD JOB NUMBER INTO J
	CAIGE	J,JOBN			;IS THIS A SPECIAL CODE?
	JUMPG	J,PARER4		;JUMP IF CORE IS ASSIGNED TO NORMAL JOB
	SKIPE	PARSJN			;ARE WE IN A SHUFFLE?
	JUMPE	J,PARR4B		;YES.  JUMP IF ALLEGED UNASSIGNED CORE.
PARR1A:	CAMN	J,LASLOS		;SAME AS LAST LOSER?
	JRST	DISCRLF			;YES. JUST TYPE A CRLF AND RETURN
	MOVEM	J,LASLOS		;SAVE CODE FOR LAST LOSER
	JUMPG	J,PARER2		;JUMP IF NOT UNASSIGNED CORE
	PUSHJ	P,DISMES		;FOR UNASSIGNED CORE
	ASCIZ	/UNUSED
/
	POPJ	P,			;RETURN LOOK FOR MORE.

PARER2:	CAIE	J,101			;IS THIS THE SYSTEM?
	JRST	PARER3			;NO. MUST BE FREE STORAGE.
	HRROS	SYSERR			;REMEMBER TO CHECKSUM THE SYSTEM
	PUSHJ	P,DISMES
	ASCIZ	/SYS
/
	POPJ	P,

PARER3:	PUSHJ	P,DISMES
	ASCIZ	/FS
/
	POPJ	P,


PARR4B:	MOVE	J,PARSJN		;JOB NUMBER OF GUY BEING SHUFFLED.
	HRRZ	TAC,PARBLK		;GET LOC OF OLD CORE
	SUBI	DSER,(TAC)		;MAKE RELATIVE LOCATION.
	JUMPL	DSER,PARR4C		;THIS ISN'T PART OF THE OLD CORE.
	HLRZ	TAC,PARBLK		;GET SIZE OF OLD CORE
	CAILE	DSER,(TAC)		;SKIP IF ERROR IS IN OLD SHUFFLED CORE.
PARR4C:	MOVEI	J,0
	JUMPE	J,PARR1A		;TREAT THIS AS UNUSED CORE.
PARER4:	PUSH	P,J			;SAVE JOB NUMBER
	HRRZ	TAC1,JBTADR(J)		;GET THE BASE ADDRESS OF THIS JOB
	CAMN	J,PARSJN		;THIS JOB SHUFFLE IN PROGRESS?
	HRRZ	TAC1,PARBLK		;YES. GET THE OLD JOB LOCATION.
	HRRZ	TAC,ERRLOC		;GET THE ERROR LOCATION
	SUBI	TAC,(TAC1)		;FORM THE USER RELATIVE ADDRESS
	MOVEM	TAC,RERLOC		;SAVE RELOCATED ERROR LOCATION.
	PUSHJ	P,DISLOC		;TYPE 6 CHARACTERS
	MOVE	J,(P)			;GET THE JOB NUMBER INTO J AGAIN
	CAMN	J,LASLOS		;SAME AS LAST TIME?
	JRST	PARR4A			;YES. DON'T TELL JOB NAME AGAIN
	MOVEM	J,LASLOS		;REMEMBER FOR NEXT TIME
	PUSHJ	P,DISTAB		;TYPE A TAB FOR SEPARATION
	MOVE	J,(P)			;MAKE SURE NO ONE CLOBBERS J.
	PUSHJ	P,DISJOB		;TYPE JOB NUMBER(JOB NAME)
	CAME	J,PARSJN		;IS THIS A SHUFFLE OPERATION?
	JRST	PARR4A
	PUSHJ	P,DISMES
	ASCIZ	/	SHUFFLE/
PARR4A:	PUSHJ	P,DISCRLF
	MOVE	J,(P)			;RESTORE J (AGAIN) 
	MOVE	TAC,JBTSTS(J)		;GET THE JOB STATUS WORD
	TLNN	TAC,JSEG		;IS THIS REALLY AN UPPER?
	JRST	PARER8			;NO, JUST A SIMPLE LOWER.
	PUSHJ	P,MARKERR		;HAS THIS UPPER LOST BEFORE (OR IS IT FIXABLE)?
	JRST	TPOPJ			;YES. DON'T TELL LOWERS AGAIN
	MOVEI	TAC,400000		;IN CASE OF A SEGMENT
	ADDM	TAC,RERLOC		;ADD 400000 TO RELOCATED ERROR ADDRESS
	MOVEI	J,JOBN-1		;FOR ALL THE JOBS IN THE WORLD....
PARER5:	LDB	TAC,PSEGN		;GET THE JOB NUMBER OF THIS GUY'S UPPER
	CAME	TAC,(P)			;SAME AS THIS UPPER?
	SOJG	J,PARER5		;NO.
	JUMPLE	J,PARER6		;JUMP IF NO MORE USERS OF THIS UPPER
 	PUSH	P,J			;SAVE THIS JOB ON THE STACK
	PUSHJ	P,TELUSR		;TELL A LOWER SEGMENT.
	POP	P,J
	SOJG	J,PARER5		;DECREMENT J AND LOOK FOR MORE.
PARER6:	POP	P,J			;GET THE NUMBER OF THIS UPPER.
	MOVE	TAC,PRJPRG(J)		;GET A RIDICULOUS NAME
	MOVEM	TAC,JOBNAM(J)		;SAVE IT AS THE JOB NAME
	POPJ	P,			;NO ONE WILL ATTACH TO THIS AGAIN.

PARER8:	PUSHJ	P,TELUSR		;TELL THE USER ABOUT WHAT BEFELL HIM
	JRST	TPOPJ			;ADJUST STACK AND RETURN.

TELUSR:	PUSHJ	P,MARKERR		;MARK THIS JOB HAS ERROR
	POPJ	P,			;HE'S BEEN TOLD BEFORE.
	MOVSI	TAC,INTPAR		;PICKUP PARITY ERROR ENABLE BIT
	TDNN	TAC,JBTIEN(J)		;IS THIS USER ENABLED FOR THIS?
	JRST	TELUS1			;NO. TELL HIM AND STOP HIM
	IORM	TAC,JBTIRQ(J)		;SET PARINT BIT FOR THIS USER
	SETOM	INTREQ(PID)		;REQUEST A USER INTERRUPT
	MOVE	TAC1,RERLOC		;GET THE RELOCATED ADDRESS OF ERROR
	MOVEM	TAC1,INTDTM(J)		;SAVE IT FOR THIS USER.
	CONO	PI,1B24!1(7-CLKCHN)	;REQUEST INTERRUPT ON CLOCK CHANNEL
	POPJ	P,

TELUS1:	PUSHJ	P,TTYERR		;GET THE USER'S TTY
	MOVE	TAC,RERLOC
	HLRZ	AC3,JBTADR(J)
	CAMN	J,PARSJN		;SHUFFLED JOB?
	HLRZ	AC3,PARBLK		;YES. USE THIS ADDRESS.
	CAILE	TAC,(AC3)		;IN LOWER?
	JRST	TELUS2			;NO. IT IS IN THE UPPER
	PUSHJ	P,INLMES		;STUFF DATA INTO TTY
	ASCIZ	/PARITY ERROR IN YOUR CORE IMAGE. LOC = /
	JRST	TELUS3

TELUS2:	PUSHJ	P,INLMES
	ASCIZ	/PARITY ERROR IN YOUR UPPER SEGMENT. LOC = /
TELUS3:	MOVE	TAC,RERLOC		;GET THE RELOCATED ERROR
	PUSHJ	P,OCTPNT		;TELL HIM THE LOCATION.
	PUSHJ	P,PRCRCC
	PUSHJ	P,TTYSTR		;START THE USER'S TTY TYPING
	SKIPL	JBTSTS(J)		;IS THIS GUY RUNNABLE?
	POPJ	P,			;NO.
TELSTP:	MOVE	TAC,JBTSTS(J)
	TLNE	TAC,JLOG		;LOGGED IN?
	JRST	STOP1			;YES. JUST STOP IT.
	JRST	ESTOP			;NO. KILL THE PHANTOM

;CALL THIS ROUTINE TO SEE IF HE NEEDS TO BE TOLD
;WILL TRY TO REPEAT SWAPIN IF POSSIBLE

MARKERR:				;PUSHJ HERE TO MARK JOB IN J AS HAVING ERROR.
	JUMPLE	J,CPOPJ			;IMPOSSIBLE JOB NUMBER
	CAIL	J,JOBN
	POPJ	P,			;IMPOSSIBLE JOB, UNNATURAL ACTS
	MOVEI	TAC,(J)			;GET JOB NUMBER
	SETZ	TAC1,
	LSHC	TAC,-5
	ROT	TAC1,5
	MOVEI	AC3,1
	ROT	AC3,-20(TAC1)		;ROTATE TO AN UNUSUAL POSITION
	TDNE	AC3,ERRJOB(TAC)		;IS THIS BIT SET ALREADY?
	POPJ	P,			;YES.
	IORM	AC3,ERRJOB(TAC)		;NO. SET IT
	MOVE TAC,RERLOC
	HLRZ AC3,JBTADR(J)
	CAIG TAC,(AC3)		;CAN'T FIX HIS UPPER HERE
	SKIPE STIME(J)		;NOW SEE IF THE SWAPPER CAN FIX IT
	JRST CPOPJ1		;MODIFIED SINCE SWAPIN
	HLRZ TAC,JBTSWP(J)
	JUMPE TAC,CPOPJ1	;NOT SWAPPED OUT YET
	SKIPN XJOB(J)
	AOS XJOB
	AOS XJOB(J)		;THIS SHOULD MAKE IT GET SWAPPED
	POPJ P,
	SUBTTL	P2 PARITY ERROR INTERRUPT
↑P2RINT:
	CONO	PI,@P2RCON		;ZERO ERROR BIT
	MOVEM	TAC,P2SA		;SAVE TAC
	MOVEI	TAC,17			;SCAN THE AC'S
	MOVES	(TAC)
	SOJGE	TAC,.-1			;LOOP
	CONSZ	PI,@P2RCON		;IS THAT WHERE IT IS?
	JRST	PARACS			;YES
	SETOM	PARFLG			;NO, TELL THE TEN
	MOVE	TAC,PARFLG		;WAIT FOR THE PDP-10 TO SEE THE FLAG
	JUMPN	TAC,.-1			;WAIT UNTIL IT GOES ZERO
	MOVE	TAC,P2RFLG		;WAIT FOR THE PDP-10 TO FINISH PARSER
	JUMPN	TAC,.-1			;
	JRST	P2ROUT			;RESTORE TAC AND DISMISS
PARACS:	CONO	PI,@P2RCON		;CLEAR PARITY ERROR
P2ROUT:	MOVE	TAC,P2SA		;RESTORE ACCUMULATOR
	JEN	@AP2CHL			;DISMISS INTERRUPT

BEND	PARSER
