COMMENT ⊗   VALID 00022 PAGES
C REC  PAGE   DESCRIPTION
C00001 00001
C00003 00002	BEGIN	MTCSER ↔ SUBTTL	MTCSER - MAGNETIC TAPE ROUTINES FOR PDP-6(516)
C00005 00003	MTC CONO BITS:
C00008 00004	MAG TAPE SERVICE DISPATCH
C00009 00005		MTAPE UUO
C00014 00006	IS SYSTEM AVAILABLE
C00018 00007	MTAPE 0 WAITS UNTIL THE CONTROL IS FREE
C00020 00008	ROUTINE TO SEE IF UNIT IS REWINDING
C00023 00009	READ AND WRITE
C00026 00010	CLOSE OUTPUT
C00028 00011	INTERRUPTS FROM MAG TAPE CONTROL ARE SENT HERE FROM IOINIT
C00031 00012	MTPDUN:	AOS	MTCBKN(DDB)	COUNT NR. OF BLOCKS READ OR WRITTEN FOR THIS DRIVE
C00033 00013	MTEND1:	CONO	DC,0		TURN OFF DATA CONTROL
C00035 00014	MTNIO1:	CONO	MTS,0		CLEAR MAG TAPE ENABLES.
C00038 00015	ROUTINE CALLED AT CLOCK LEVEL TO SEE IF ANY UNITS WHICH ARE IN A
C00040 00016	MTNOTI:	PUSHJ	P,ADVBFE	WRITING
C00041 00017	MTEOR2:	SKIPE	MTEOFF		END-OF-FILE?
C00044 00018	THIS ROUTINE BACKSPACES OVER ONE RECORD (A BAD ONE) THEN
C00047 00019	LOGICAL END OF TAPE LOOP
C00048 00020	DEVICE DEPENDENT DUMP MODES. MODE 16.
C00051 00021	MTDPI1:	TRNE	IOS,IODEND	EOF?
C00052 00022	MDRTRY:	MOVE	TAC,@MTCMDP	RETRY LAST OPERATION
C00054 ENDMK
C⊗;
BEGIN	MTCSER ↔ SUBTTL	MTCSER - MAGNETIC TAPE ROUTINES FOR PDP-6(516)
;	25-JUL-68 FROM DEC MTCSR6 OF 7-MAY-68

;STATUS BITS IN MTS.  * MEANS CAUSES INTERRUPT WHEN ENABLED.
;NAMES ARE TAKEN FROM "MAGNETIC TAPE CONTROL 516 INSTRUCTION MANUAL" H-516

ICR←←1B35	;* INTERFACE AND CONTROL READY
RDY←←1B34	;  TAPE TRANSPORT READY
ERF←←1B33	;* END OF RECORD FLAG
PER←←1B32	;  LATERAL PARITY ERROR
LPE←←1B31	;  LONGITUDINAL PARITY ERROR
RCE←←1B30	;  READ COMPARE ERROR (NOT USED)
MIS←←1B29	;  TAPE MISSED CHARACTER
TWL←←1B28	;  TAPE WRITE-ENABLE LOCKOUT RING OUT
EFF←←1B27	;  END-OF-FILE SENSED
BCT←←1B26	;  OTHER COMPUTER USING TRANSPORT OR IN LOCAL
TLR←←1B25	;  LAST OPERATION WAS A WRITE (NOT USED)
TLP←←1B24	;  TAPE AT LOAD POINT
TEP←←1B23	;  TAPE AT END POINT
RWD←←1B22	;  TRANSPORT IS REWINDING
XNC←←1B21	;* TRANSFER NEW COMMAND
LIF←←1B20	;* LOAD POINT INTERRUPT FLAG (NOT USED)
DCS←←1B19	;  DATA CONTROL SELECTED (NOT USED)
ILC←←1B18	;  ILLEGAL COMMAND:
		;     WRITE OR WEF ON A WRITE-LOCKED TAPE
		;     BACKSPACE RECORD, BACKSPACE FILE, OR READ
		;	BACKWARDS WHILE AT BEGINNING OF TAPE
		;     ANY OPERATION ON A TRANSPORT BEING USED
		;	BY THE OTHER COMPUTER

;MTC CONO BITS:
;BITS 33-35	ARE PI CHANNEL ASSIGNMENT (=MTCCHN)
;BITS 29-31	ARE UNIT SELECT, BYTE POINTER IS PUNIT
;BIT 28		IS "DO NOT RETURN TO POOL" (NOT USED)
;BITS 24-27	ARE "FUNCTION".  THEY ARE AS FOLLOWS:
;			00=NO OPERATION (UNUSED)
;			01=REWIND
;			02=WRITE
;			03=WRITE END-OF-FILE
;			04=READ-COMPARE (NOT USED)
;			05=READ
;			06=SPACE FORWARD RECORD
;			07=BACKSPACE RECORD
;			10=NO OPERATION (NOT USED)
;			11=REWIND AND UNLOAD (SAME AS REWIND AT STANFORD)
;			12=READ ACROSS RECORD (NOT USED)
;			13=WRITE THREE INCHES (APPROX) OF MAG TAPE
;			14=WRITE WITH LONG EOR (NOT USED)
;			15=READ BACKWARD (NOT USED)
;			16=SPACE FORWARD FILE
;			17=BACKSPACE FILE
;BITS 22-23	SPECIFY DENSITY:
;			0=200 BPI
;			1=556 BPI
;			2=800 BPI
;			3=556 BPI
;BIT 21		SPECIFIES PARITY
;			0=EVEN
;			1=ODD
;BIT 20		SPECIFIES SLICE LEVEL
;			0=HIGH (NORMAL)
;			1=LOW


MTDC←←2		;MAG TAPE DATA CONTROL DEVICE NUMBER
SEL←←2		;UNIT TO COMMAND BUFFER
IOSEOF←←4000	;SPACING ONE RECORD FORWARD FOUND EOF
IODT←←10000	;A 1 FOR A DATA TRANSFER TYPE COMMAND
IOSLIC←←20000	;A 1 IF SLICE LEVEL IS 1, OTHERWISE 0.
HASMT←←40000	;IF A 1, THIS JOB HAS THE MAG TAPE CONTROL
IOREW←←400000	;A 1 IF UNIT IS REWINDING AND ANOTHER OPERATION
		;IS ATTEMPTED ON SAME UNIT. MUST BE SIGN BIT.
MTREDO←←=10	;NUMBER OF TIMES TO RETRY ON ERRORS
;MAG TAPE SERVICE DISPATCH

	JRST	MTCINI		;INITIALIZATION
	JRST	CPOPJ1		;MTA HUNG TIMEOUT. RELEASE DATA CONTROL,
				;MAGTAPE CONTROL, PRINT ERROR AND STOP JOB
↑MTCDSP:
	JRST	WAIT1		;RELEASE - WAIT FOR IOACT TO BE OFF.
	JRST	MTCLSO		;CLOSE OUTPUT
	JRST	MTOUT		;OUTPUT
	JRST	MTIN		;INPUT
	JRST	CPOPJ1		;ENTER IN DIRECTORY
	JRST	CPOPJ1		;LOOKUP IN DIRECTORY
	JRST	MTDMPO		;DUMP OUTPUT
	JRST	MTDMPI		;DUMP INPUT
	POPJ	P,		;SETO
	POPJ	P,		;SETI
	POPJ	P,		;GETF
	JRST	CPOPJ1		;RENAME
	POPJ	P,		;CLOSE INPUT
	POPJ	P,		;UTPCLR
	JRST	MTAPEU		;MTAPE UUO

;	MTAPE UUO
;THE FOLLOWING MTAPES ARE LEGAL:
C←←0
C←←C!1B35	;0 = NOP
C←←C!1B34	;1 = REWIND
C←←C!1B26	;11= REWIND, UNLOAD
C←←C!1B28	;7 = BACKSPACE RECORD
C←←C!1B20	;17= BACKSPACE FILE
C←←C!1B32	;3 = WRITE END OF FILE
C←←C!1B29	;6 = SPACE FORWARD RECORD
C←←C!1B21	;16= SPACE FORWARD FILE
C←←C!1B24	;13= WRITE 3" OF BLANK TAPE
C←←C!1B27	;10= SKIP TO LOGICAL EOT (PROGRAMMED)

MTAPEU:	MOVEI	ITEM,1		;CHECK FOR LEGAL MTAPE UUO
	LSH	ITEM,(UUO)	;SHIFT BIT ACCORDING TO THE USER'S UUO
	TRNN	ITEM,C		;DID HE SPECIFY A LEGAL CODE ?
	JRST	UUOERR		;NO--TYPE MONITOR ERROR MESSAGE.
	SOJE	ITEM,MTP0	;CHECK FOR MTAPE 0 (SPECIAL SYNC WAIT NO-OP)
	PUSHJ	P,MTCHK2	;MAKE SURE SYSTEM IS AVAILABLE.
	TRZ	IOS,776000	;CLEAR ERROR BITS: IOF, IOACT, IOBOT AND IOTEND.
	SKIPA	ITEM,UUO	;CALL MTAPE2
MTAPE:	PUSHJ	P,MTCHK2	;CHECK IF MAG TAPE CONTROL AVAIL.
MTAPE2:	TDZ	IOS,[XWD IODT!IOSEOF,IOACT]
	TRNN	ITEM,SLICE	;SET SLICE LEVEL THIS UUO?
	JRST	NOSET		;NO
	TLZ	IOS,IOSLIC	;YES, CLEAR LEVEL
	TRNE	ITEM,SLEVEL	;SET TO 1?
	TLO	IOS,IOSLIC	;YES
NOSET:	LSH	ITEM,=8		;MOVE CODE TO MT FUNCTION POSITION
	ANDI	ITEM,17B27	;LEAVE ONLY THE FUNCTION BITS
	CAIN	ITEM,10B27	;LOGICAL EOT?
	JRST	MTLEOT		;YES.
	CONSO	MTS,TLP		;AT LOAD POINT?
	JRST	MTGO1		;NOT AT LOAD POINT.
	CAIE	ITEM,7B27	;YES, BACKSPACE RECORD?
	CAIN	ITEM,1B27	;NO, REW?
	JRST	MTFIN		;AVOID BACKWARDS MOTION WHEN AT LOAD POINT
	CAIN	ITEM,17B27	;NO. BACKSPACE FILE?
	JRST	MTFIN		;YES. AVOID BACKWARDS MOTION FROM LOAD POINT.


MTGO1:	LDB	TAC,PUNIT	;IN, OUT, MTAPE UUOS & INTERRUPT FOR NEXT RECORD
	DPB	TAC,[POINT 3,ITEM,31]	;FROM COMMAND IN ITEM. STORE UNIT NUMBER.
	LDB	TAC,[POINT 3,IOS,28]	;DENSITY PARITY
	TRNN	TAC,7		;NO DENSITY OR PARITY SPECIFIED?
	IORI	TAC,STDENS	;YES, USE STANDARD
	XORI	TAC,5		;ODD, 556
	DPB	TAC,[POINT 3,ITEM,23]
	MOVEI	TAC,MTCCHN(ITEM);ADD PI CHANNEL TO COMMAND
	TLNE	IOS,IOSLIC	;SLICE LEVEL A 1?
	TRO	TAC,100000	;YES, SET COMMAND.
	SETZM	MTEOFF		;CLEAR EOF FLAG
	HRRM	DDB,MTDEV
	HRLM	TAC,MTDEV	;COMMAND,,DDB ADDRESS INTO MTDEV
	MOVEI	TAC1,MTNIO2	;ASSUME NON-DATA TRANSFER
	TLNN	IOS,IODT	;IS THIS A DATA TRANSFER OPERATION  REQUIRING DC?
	JRST	MTGO2		;NO, MUST BE SPACING OPERATION
	CONO	DC,@MDCSAV	;YES, ATTACH DC TO MAGTAPE
	CONO	PI,DCTON	;TURN DC PI CHANNEL ON
	SETZM	MISSED		;CLEAR DATA MISSED FLAG
	MOVEI	TAC1,MTXNC	;ON INTERRUPT, GO TO MTXNC
MTGO2:	MOVEM	TAC1,MTIDSP	;STORE DISPATCH ADDRESS FOR INTERRUPT
	PUSH	P,TAC
	PUSHJ	P,STOIOS
	POP	P,TAC
	HRLI	TAC,XNC
	CONO	PI,PIOFF	;DISABLE INTERRUPTS
	CONO	MTC,(TAC)	;ISSUE OPERATION TO CONTROLLER
	HLRM	TAC,MTCCON	;ENABLE SOFTWARE FOR XNC
	CONO	MTS,XNC		;ENABLE HARDWARE FOR XNC
	CONO	PI,PION		;ENABLE INTERRUPTS
	POPJ	P,		;EXIT
;IS SYSTEM AVAILABLE
MTCHEK:	PUSHJ	P,GETDCMT	;GET DATA AND MAG TAPE CONTROLS
	AOSE	MTREQ		;ARGUMENT
	MOVE	IOS,DEVIOS(DDB)
	TLO	IOS,IODT	;FLAG DATA TRANSFER
	PUSHJ	P,MTCHK4	;WAIT FOR REWIND
	JRST	MTCHEK		;GET DC & MT AGAIN
	JRST	SETACT		;SET DEV. ACTIVE BIT

MTCHK2:	AOSE	MTREQ		;GET MAGTAPE CONTROL ONLY-SPACING OPERATION.
	PUSHJ	P,MTWAIT
	MOVE	IOS,DEVIOS(DDB)
	PUSHJ	P,MTCHK4	;CHECK STATUS
	JRST	MTCHK2		;GET MT AGAIN
	POPJ	P,

MTCHK4:	TLO	IOS,HASMT	;THIS JOB NOW HAS MTC
	TLZE	IOS,IOBEG	;FIRST OPERATION AFTER INIT 
	TLZ	IOS,IOSLIC	;YES, SET SLICE LEVEL TO 0.
	TLZ	IOS,IOREW	;CLEAR MAG TAPE REWINDING
	PUSHJ	P,REWCK		;CHECK IF REWINDING?
	JRST	CPOPJ1		;NO - STATUS OK
	JRST	QSTAT		;QUERY STATUS
	PUSHJ	P,DETMDC	;REWINDING- DETACH MTC, DC AND TURN OFF IODT & HASMT
	TLO	IOS,IOREW+IOW	;SET REWIND WAIT, IO WAIT
	MOVEM	IOS,DEVIOS(DDB)	;STORE IOS
	AOSG	MTREWN		;ADD 1 TO REWIND WAIT COUNT SKIP IF CLREQ IN
	PUSHJ	P,MTCLK		;MAKE A CLOCK REQUEST. THIS IS ONLY UNIT REWINDING
	PUSH	P,J		;SAVE J
	LDB	J,PJOBN		;GET THE JOB NUMBER OF TAPE OWNER
	MOVNI	AC1,IOWQ	;REQUE THIS GUY
	MOVEM	AC1,JOBQUE(J)	;TO IOWQ UNTIL MT REWINDS
	PUSHJ	P,REQUE		;
	POP	P,J		;RESTORE J
	JRST	WSCHED		;WAIT...

QSTAT:	PUSHJ	P,DETMDC	;DETACH MTC AND DC
	LDB	J,PJOBN		;LOAD UP JOB NUMBER
	JRST	HNGSTP		;CHECK STATUS (PULL FINGERS OUT, ETC)
;MTAPE 0 WAITS UNTIL THE CONTROL IS FREE
;THUS MTAPE 0 PROVIDES THE ONLY WAY FOR A USER TO WAIT UNTIL A SPACING OPERATION
; (I.E., SKIP, BACKSPACE, OR REWIND) IS COMPLETED.

MTP0:	PUSHJ	PDP,MTCHK2	;WAIT FOR CONTROL TO BECOME FREE,
				; THEN GIVE IT BACK IMMEDIATELY,
				; AND RETURN TO THE USER.




;DETMDC-
;	DETACH MTC, AND TURN OFF HASMT.
;	THEN (IFF IODT ON)
;	TURN OFF IODT AND DETACH DC

↑DETMDC:
	TLZN	IOS,HASMT	;THIS JOB HAS MTC?
	JRST	STOIOS		;NO
	SOSL	MTREQ		;YES- ANYONE ELSE WAITING FOR IT?
	SETOM	MTAVAL		;YES- FLAG AS JUST BECOME AVAILABLE
↑DETDC:	TLZN	IOS,IODT	;DOES JOB HAVE DATA CONTROL?
	JRST	STOIOS		;NO- EXIT
	SOSL	DCREQ		;ANYONE ELSE WAITING FOR IT?
	SETOM	DCAVAL		;YES- FLAG AS JUST BECOME AVAILABLE
	JRST	STOIOS		;AND EXIT

MTHUNG:	TLNN	IOS,HASMT
	POPJ	P,		;HOW DID WE GET HERE IF HE DIDN'T HAVE IT?
	CONO	MTS,400000	;FLUSH CURRENT COMMAND
	CONO	MTC,0		;GRONK DELAYS
	TLNE	IOS,IODT	;DOES HE HAVE THE DATA CONTROL?
	CONO	DC,0		;HOLD DATA CONTROL
	JRST	DETMDC		;DEATCH EVERYTHING.
;ROUTINE TO SEE IF UNIT IS REWINDING
;CALL	MOVE DEVDAT,ADDRESS OF DDB
;	PUSHJ PDP,REWCK
;	UNIT READY
;	UNIT OFF
;	UNIT REWINDING

REWCK:	LDB	TAC,PUNIT
	ROT	TAC,4
	CONO	MTC,MTCCHN(TAC)
	CONO	MTS,SEL		;JAM UNIT INTO COMMAND BUFFER
	CONSZ	MTS,RWD		;SKIP IF REWIND MOTION OFF
	JRST	CPOPJ2		;RETURN TO CALL+2 IF TAPE REWINDING
	CONSO	MTS,BCT		;OTHER COMPUTER USING TRANSPORT, OR IN LOCAL?
	CONSO	MTS,RDY		;IS UNIT READY?
	JRST	CPOPJ1		;UNIT UNREADY OR UNAVAILABLE
	CONSZ	MTS,TLP		;UNIT READY AND AVAILABLE IS IT AT LOAD POINT?
	IORI	IOS,IOBOT	;YES.
	CONSZ	MTS,TEP		;END POINT?
	IORI	IOS,IOTEND	;YES.
	POPJ	PDP,		;UNIT HAPPY. DIRECT RETURN


COMMENT $
THIS WORKS WITH THE FOLLOWING MOD TO 545 TRANSPORT:

DELETE 1B23K TO ??

ADD	1B16K TO 1B08K		REW(1)(GND) BUFFERED
	1B19S TO 1B08L		FWD/LP(1)(GND)
	1B08N TO 1B23K		(REW(1).OR.FWD/LP(1))

THIS MOD SETS IOB22(1) WHILE MAGTAPE IS REWINDING OR SPACING FORWARD
TO LOAD POINT- IE ENABLES THE PROCESSOR TO DISTINGUISH BETWEEN A
TAPE WHICH IS AT THE END OF A REWIND COMMAND, AND A TAPE WHICH IS
SWITCHED TO LOCAL, OR OFF

ADD	1B08U TO 1B08N		CLAMPED LOAD FOR LOCAL
	1B08R TO 1B10J		LOCAL (-3V)
	1B08S TO 1B15F		SELECT (-3V)
	1B08V TO P1-42		LOCAL STATUS TO OLD POOL STATUS BIT
	P1-42 TO P2-42		ADD THROUGH CONNECTION FOR DRIVES BEYOND

THIS MOD MAKES BIT 26 OF CONI 224,  A ONE IF THE SELECTED
DRIVE IS IN LOCAL.  IT USES A SPARE SECTION OF R111 IN EACH 545
AND LOGIC IN THE 516/521 USED FOR POOLING WITH 570 TAPE DRIVES.
$
;READ AND WRITE

MTIN:	PUSHJ	P,MTCHEK	;IS SYSTEM AVAILABLE?
	TLZ	IOS,IO		;READING.
MTIN1:	SETCM	TAC,@DEVIAD(DDB)	;-SIZE-1
	HRRI	TAC,@DEVIAD(DDB)	;BUFFER ADDRESS,PROG INCLUDED
	ADD	TAC,[XWD 2,1]	;-SIZE+1,BUFFER+1
	MOVEI	ITEM,5B27	;READ
	MOVE	TAC1,[BLKI DC,4000!<MTDC*10>!DCTCHN]
	JRST	MTINDC

MTOUT:	PUSHJ	P,MTCHEK
	TLO	IOS,IO		;WRITING
	CONSZ	MTS,TWL		;IS FILE PROTECT RING IN?
	JRST	MTOUTE		;NO, ERROR CANT WRITE. CROCK!!
MTOUT1:	MOVEI	TAC,@DEVOAD(DDB)	;BUFFER ADDRESS, PROG INCLUDED
	MOVN	TAC1,1(TAC)	;-WD COUNT
	JUMPE	TAC1,MTNOPO	;IF WC=0, DONT DO ANYTHING
	HRL	TAC,TAC1	;-WD CMT,BUFFER
	ADDI	TAC,1		;BUFFER+1
	MOVE	TAC1,[BLKO DC,3400!<MTDC*10>!DCTCHN]
	MOVEI	ITEM,2B27	;WRITE
MTINDC:	CONO	PI,DCTOFF	;TURN DATA CONTROL PI CHANNEL OFF
	MOVEM	TAC,MTDCCN	;BLKO POINTER
	MOVEM	TAC,DCWRD
	HRRZM	TAC1,MDCSAV	;SAVE DC COMMAND
	HRRI	TAC1,DCWRD
	MOVEM	TAC1,@DCLOC	;BLK COMMAND
	MOVE	TAC1,[JSR MTDCND]
	MOVEM	TAC1,@DCLOC1
	IORI	IOS,IOACT	;SET IOACT
	JRST	MTGO1		;GO START OPERATION

MTOUTE:	TRO	IOS,IOIMPM	;WRITE LOCK, DEVICE ERROR
	JRST	MTNOP1		;DETACH DATA CONTROL AND MAG TAPE. RETURN TO UUOCON

MTNOPO:	PUSHJ	P,ADVBFE	;ADVANCE OVER THE EMPTY BUFFER
	JFCL			;IGNORE CONTINUE INDICATION
MTNOP1:	PUSHJ	P,ETCHK		;JUST IN CASE
	TLZE	IOS,IOW		;UNWAIT THE JOB
	PUSHJ	P,SETIOD
	PUSHJ	P,CLRACT
	JRST	DETMDC		;DETACH EVERYTHING AND RETURN
;CLOSE OUTPUT

MTCLSO:	TLNN	DDB,OUTPB	;HAS AN OUTPUT BEEN DONE?
	POPJ	P,		;NO. DONT WRITE ON TAPE.
	LDB	TAC,PIOMOD	;DUMP MODE?
	CAIGE	TAC,DR
	PUSHJ	P,OUT		;BUFFERED MODE: OUTPUT LAST PARTIAL BUFFER
	PUSHJ	P,WSYNC		;WAIT FOR OUTPUT TO FINISH
	PUSH	P,ITEM		;DON'T CLOBBER J!!!
	MOVEI	ITEM,3		;WRITE EOF
	PUSHJ	P, MTAPE
	MOVEI	ITEM,3		;WRITE EOF
	PUSHJ	P,MTAPE
	MOVEI	ITEM,7		;BSP
	PUSHJ	P,MTAPE
	POP	P,ITEM		;RESTORE J
	POPJ	P,


MTCINI:	SETOM	MTREWN		;SET CLOCK REQUEST COUNT TO -1
	MOVEI	TAC,40+DCTCHN*2
	CONSZ	APR,MAOFF	; MA TRAP OFFSET?
	ADDI	TAC,100		; YES, OFFSET ADDRESS
	MOVEM	TAC,DCLOC
	ADDI	TAC,1
	MOVEM	TAC,DCLOC1
	JRST	MTNIO1


;BLK COUNTED OUT

↑MTDCN1:
	CONO	PI,DCTOFF	;SHUT OFF DC CHANNEL
	CONSZ	DC,10000	;DATA MISSED?
	SETOM	MISSED		;YES. OOPS
	JEN	@MTDCND		;DISMISS INTERRUPT.
;INTERRUPTS FROM MAG TAPE CONTROL ARE SENT HERE FROM IOINIT
↑MTCINT:JSR	MTCSAV		;SAVE AC'S
	HRRZ	DDB,MTDEV	;SET UP DDB POINTER
	LDB	PROG,PJOBN	;JOB NUMBER
	MOVE	PROG,JBTADR(PROG)
	MOVE	IOS,DEVIOS(DDB)
	JRST	@MTIDSP		;DISPATCH TO WHOEVER WANTS INTERRUPT.

;HERE ON FIRST INTERRUPT FROM DATA TRANSFER OPERATION (XNC)
MTXNC:	MOVEI	TAC,ERF		;ENABLE SOFTWARE FOR ERF
	HRRM	TAC,MTCCON
	MOVEI	TAC,MTEOR	;SET DISPATCH ADDRESS TO MTEOR
	MOVEM	TAC,MTIDSP
	CONO	MTS,ERF		;ENABLE HARDWARE FOR ERF
	POPJ	P,		;DISMISS INTERRUPT

;HERE ON ERF INTERRUPT FROM DATA TRANSFER OPERATION
MTEOR:	CONO	PI,DCTOFF	;TURN OFF DC IN CASE BLKI/BLKO DIDNT OVERFLOW
	CONSZ	DC,10000	;DATA MISS?
	SETOM	MISSED		;YES.
	CONSZ	MTS,EFF		;END-OF-FILE?
	SETOM	MTEOFF		;YES. SET FLAG

	MOVE	ITEM,DCWRD	;GET THE IOWD
	TLNE	IOS,IO		;SKIP IF INPUT
	TLNN	ITEM,-1		;OUTPUT. SKIP IF WORDS REMAIN IN THE IOWD
	JRST	MTEOR0		;INPUT OR IOWD EXHAUSTED.
	SETOM	MISSED		;SET DATA MISSED. - OUTPUT FAILED TO EXHAUST IOWD
	JRST	MTEOR2		;ERROR.

MTEOR0:	CONSO	DC,160000	;DATA REMAINING IN DC?
	JRST	MTEOR1		;NO.
	TLNN	IOS,IO		;OUTPUT?
	SKIPE	MISSED		;NO.  DATA MISSED?
	JRST	MTEOR2		;YES.  ERROR.
	CONI	DC,TAC1		;FETCH DC STATUS BITS
	LSH	TAC1,-15	;SHIFT CHARACTER COUNT TO LSBITS
	IMULI	TAC1,-6		;-NO OF BITS TOO FAR RIGHT
	CONO	DC,@MDCSAV	;?? IF DON SAYS SO, WELL, OK (JUST)
	DATAI	DC,TAC		;FETCH LAST PART-WORD OF DATA
	LSH	TAC,44(TAC1)	;SHIFT LAST CHARACTERS TO LEFT END
	JUMPG	ITEM,MTEOR1
	AOBJN	ITEM,.+1	;BUMP DATA POINTER
	MOVEM	TAC,(ITEM)	;STORE LAST WORD
	MOVEM	ITEM,DCWRD	;LET LOSER SEE LAST WORD, PLS! (DWP 3 MAY 71)
	CONO	DC,0		;SHUT DOWN DC.

MTEOR1:	CONSZ	MTS,LPE!PER!ILC!MIS
				;IF END OF RECORD, CHECK
				;PARITY,DATA MISSED,  AND ILLEGAL FLAG
	JRST	MTEOR2		;IF ERROR CAUSE INTERRUPT TO
				;ERROR ROUTIE VIA ICR
MTPDUN:	AOS	MTCBKN(DDB)	;COUNT NR. OF BLOCKS READ OR WRITTEN FOR THIS DRIVE
	LDB	TAC,PIOMOD
	CAIL	TAC,DR
	JRST	DMPDUN		;DUMP
	TLNE	IOS,IO
	JRST	MTNOTI		;WRITING
	SKIPE	MTEOFF		;NOT EOF?
	JRST	MTEOF
	MOVEI	TAC,@DEVIAD(DDB);BUFFER ADDRESS
	JUMPE	TAC,MTEND1	;JUMP IF RELEASE HAS WIPED OUT BUFFERS
	MOVN	TAC1,MTDCCN	;WD CNT-1
	AOBJN	TAC1,.+1	;WD CNT
	HLLZ	TAC1,TAC1	;CLR RT HALF
	ADD	TAC1,DCWRD	;ADD CURRENT COUNT=NO. OF WDS
	HLRM	TAC1,1(TAC)	;STORE AT WORD COUNT
	PUSHJ	P,ADVBFF
	JRST	MTEND1		;NEXT BUFFER FULL
	JRST	MTCONN		;CONTINUE MODE

DMPDUN:	TLNN	IOS,IO		;INPUT OR OUTPUT?
	SKIPN	MTEOFF		;ONLY CHECK EOF ON INPUT
	SKIPA			;OUTPUT OR INPUT+EOF
	TRO	IOS,IODEND	;INPUT+EOF
	SETZM	MTEOFF		;RESET EOF FLAG IN CASE SET.
	PUSHJ	PDP,ETCHK	;CHECK FOR EOT
	AOS	TAC,MTCMDP	;NEXT ITEM IN COMMAND LIST.
	TLNN	IOS,IO		;READING OR WRITING?
	JRST	MTDPI1		;READING
	JRST	MTDPO1		;WRITING.

MTEOF:	TLO	IOS,IOEND
	SETZM	MTEOFF		;CLEAR EOF FLAG

;AND FALL INTO MTEND1
MTEND1:	CONO	DC,0		;TURN OFF DATA CONTROL
	CONO	PI,DCTOFF
	PUSHJ	P,DETDC		;DETACH DC (IF ASSIGNED)
	PUSHJ	P,ETCHK		;CHECK FOR END OF TAPE (FOR DUMP MODE OUT)
	PUSHJ	P,CLRACT	;CLEAR IOACT, STORE IOS
	MOVEI	TAC,MTFIN	;SET DISPATCH ADDRESS TO MTFIN
	MOVEM	TAC,MTIDSP
	HRRZM	DDB,MTDEV	;STORE DDB ADDTRESS (DUMP MODE)
	JRST	MTIGN		;RETURN WHEN ICR

;HERE ON XNC INTERRUPT FROM NON-DATA TRANSFER.
MTNIO2:	PUSHJ	P,MTERST	;RETURN WHEN ICR
	HLRZ	TAC,MTDEV	;COMMAND
	ANDI	TAC,17B27
	CAIE	TAC,6B27	;NO. SPACING ONE RECORD?
	JRST	MTNIO		;YES, EXIT
	CONSZ	MTS,EFF		;EOF?
	TDO	IOS,[XWD IOSEOF,IODEND]
MTFIN:
MTNIO:	TLZE	IOS,IOW		;CLEAR WAIT
	PUSHJ	P,SETIOD
	PUSHJ	P,DETMDC	;DETACH MTC (IF HASMT SET) AND DC (IF IODT)
	PUSHJ	P,ETCHK		;CHECK FOR END OF TAPE
	PUSHJ	P,CLRACT	;RESTORE BITS,CLEAR IOACT

;AND FALL INTO MTNIO1
MTNIO1:	CONO	MTS,0		;CLEAR MAG TAPE ENABLES.
	CONO	MTC,MTCCHN	;CLEAR MAG TAPE CONTROL.
	HLLZS	MTCCON		;CLEAR THE INTERRUPT MASK BITS.
	MOVNI	TAC,MTREDO	;REPEAT COUNTER
	MOVEM	TAC,MTERCN
	SKIPGE	MTREWN		;SOME OTHER UNIT REWINDING WITH A COMMAND HELD UP?
	POPJ	P,		;NO, DISMISS INTERRUPT

;SOME UNIT IS REWINDING AND HAS HAD ANOTHER COMMAND HELD UP.
;CHECK ALL UNITS

MTREWW:	SETOM	MTREWN		;SET COUNT TO NO. UNITS IN REW WAIT
	PUSH	P,DDB
	MOVEI	DDB,MTCDDB	;GET BEGINNING OF MT DATA BLOCK CHAIN

REWLP:	MOVE	IOS,DEVIOS(DDB)
	JUMPGE	IOS,REW2	;IS UNIT IN A REW WAIT?
	PUSHJ	PDP,REWCK	;YES,SEE IF FINISHED REW.
	JRST	.+3		;HAS FINISHED REWINDING
	JRST	.+2		;OFF- WAKE JOB AND LET HIM LOSE.
	JRST	REW0		;STILL REWINDING
	TDZ	IOS,[XWD IOREW,IOACT]	;GET JOB OUT OF IO WAIT
	TLZE	IOS,IOW
	PUSHJ	P,SETIOD	;START JOB UP AGAIN
	MOVEM	IOS,DEVIOS(DDB)
	JRST	REW2

REW0:	PUSHJ	P,STOIOS	;RESET HUNG COUNT IF STILL REWINDING
REW1:	AOS	MTREWN		;INCREMENT COUNT OF REW WAIT UNITS
REW2:	HLRZ	DDB,DEVSER(DDB)	;LINK TO NEXT DDB
	JUMPE	DDB,REW3	;LAST DDB?
	HLRZ	DAT,DEVNAM(DDB)	;NO. GET LH OF NAME.
	CAIN	DAT,'MTA'	;IS THIS A MAGTAPE?
	JRST	REWLP		;YES. CONTINUE
REW3:	POP	P,DDB
	POPJ	P,		;YES, DISMISS INTERRUPT OR RETURN TO MTCLOK

ETCHK:	CONSZ	MTS,TEP		;EOT SEEN?
	IORI	IOS,IOIMPM!IOTEND	;YES- SET FLAGS	;THIS IS A CROCK!
	TDZ	IOS,[XWD IOREW,IOBOT]	;NO LONGER REWINDING
	CONSZ	MTS,RWD!TLP	;UNLESS
	TRO	IOS,IOBOT	;IS REALLY REWINDING
	POPJ	P,		;EXIT
;ROUTINE CALLED AT CLOCK LEVEL TO SEE IF ANY UNITS WHICH ARE IN A
;REW WAIT HAVE FINISHED REWIND.

MTCLOK:	SKIPGE	MTREQ		;IS ANY JOB USING ANY UNIT NOW?
	PUSHJ	P,MTREWW	;NO, CHECK ALL MAG TAPE
				;UNITS TO SEE IF JUST FINISHED
				;REWINDING(WHICH WERE IN REW WAIT)
	SKIPGE	MTREWN		;YES,ARE ANY UNITS STILL IN REW WAIT?
	POPJ	P,		;NO, RETURN TO CLOCK ROUTINE WITHOUT
				;PUTTING IN CLOCK REQUEST

;ROUTINE TO PUT IN A CLOCK REQUEST

MTCLK:	MOVEI	TAC1,JIFSEC/2	;CHECK EVERY HALF SECOND
	HRLI	TAC1,MTCLOK	;DISPATCH ADDRESS
	CONO	PI,PIOFF	;TURN OFF PI
	IDPB	TAC1,CLOCK	;STORE CLOCK REQUEST
	CONO	PI,PION		;TURN ON PI
	POPJ	P,
MTNOTI:	PUSHJ	P,ADVBFE	;WRITING
	JRST	MTEND1
MTCONN:
	CONSZ	MTS,TEP!BCT	;END OF TAPE OR IN LOCAL?
	JRST	MTEND1		;STOP TAPE
	CONO	DC,0		;CLEAR DATA CONTROL
	TLZE	IOS,IOW
	PUSHJ	P,SETIOD
	MOVEM	IOS,DEVIOS(DDB)
	MOVNI	TAC,MTREDO
	MOVEM	TAC,MTERCN
	TLNN	IOS,IO		;INPUT OR OUTPUT?
	JRST	MTIN1		;CALL INPUT SUBROUTINE
	JRST	MTOUT1		;CALL OUTPUT SUBROUTINE
MTEOR2:	SKIPE	MTEOFF		;END-OF-FILE?
	JRST	MTPDUN		;YES. IGNORE ERRORS.
MTERR:	MOVEI	ITEM,0
	CONSZ	MTS,LPE		;LONGITUDINAL PARITY ERROR?
	TLO	ITEM,1000	;YES, COUNT IN QUARTER 1
	CONSZ	MTS,PER		;LATERAL PARITY ERROR?
	TLO	ITEM,1		;YES, COUNT IN QUARTER 2
	CONSZ	MTS,ILC		;ILLEGAL OP?
	TRO	ITEM,1000	;YES, COUNT IN QUARTER 3
	SKIPE	MISSED		;DATA MISSED?
	TRO	ITEM,1		;YES, COUNT IN QUARTER 4
	ADDM	ITEM,MTCENT(DEVDAT);ADD TO ERROR COUNTS FOR THIS DRIVE
	TRNE	IOS,IONRCK	;DOES USER WANT TO SUPPRESS ERROR HANDLING?
	JRST	MTERR3		;YES, GIVE HIM HIS ERROR BITS
	PUSHJ	P,MTERST	;RETURN ON ICR
	AOSL	MTERCN		;ENOUGH ERRORS?
	JRST	MTERR2		;YES.
	HLRZ	TAC,MTDEV	;COMMAND
	ANDCMI	TAC,17B27
	MOVEI	TAC,7B27(TAC)	;BSP
	PUSHJ	P,MTXCT		;INITIATE THE OPERATION
	PUSHJ	P,MTERST	;RETURN WHEN OPERATION COMPLETE.

;COME HERE AFTER ERROR BACKSPACE OR WRITE BLANK TAPE
;TO RE-ISSUE THE READ OR WRITE COMMAND.

MRETRY:	LDB	TAC,PIOMOD	;GET MODE.
	CAIL	TAC,DR		;DUMP MODE?
	JRST	MDRTRY		;YES.
	TLNE	IOS,IO		;INPUT OR OUTPUT?
	JRST	MTOUT1		;OUTPUT
	JRST	MTIN1		;INPUT

;COME HERE AFTER ENOUGH RETRIES.  ASSUME ERROR
;IS PERMANENT.

MTERR2:	TLNE	IOS,IO		;WRITING?
	JRST	WRBLNK		;YES. ERASE BAD SPOT.
MTERR3:	CONSO	MTS,ILC!MIS	;SET IODERR IF ILLEG OR MISSED CHAR FLAGS
	SKIPE	MISSED		;SET IODERR IF DATA MISSED
	TRO	IOS,IODERR
	CONSZ	MTS,LPE!PER	;SET IODTER IF LONG OR LAT PARITY
	TRO	IOS,IODTER
	JRST	MTPDUN
;THIS ROUTINE BACKSPACES OVER ONE RECORD (A BAD ONE) THEN
;WRITES 3" OF BLANK TAPE WHICH WILL BE SKIPPED OVER ON
;INPUT (LOOKS LIKE A LONG INTER-RECORD GAP).  THE PROCESS
;CONTINUES UNTIL NO ERRORS ARE ENCOUNTERED OR EOT IS REACHED.

WRBLNK:	CONSZ	MTS,TEP		;EOT?
	JRST	MTFIN		;YES. GIVE UP.
	HLRZ	TAC,MTDEV	;LAST COMMAND
	ANDCMI	TAC,17B27	;MASK OUT IRREVALENCIES
	MOVEI	TAC,7B27(TAC)	;BSP
	PUSHJ	P,MTXCT		;INITIATE THE OPERATION
	PUSHJ	P,MTERST	;RETURN WHEN BSR DONE.
	HLRZ	TAC,MTDEV	;GET BACK COMMAND
	ANDCMI	TAC,17B27
	MOVEI	TAC,13B27(TAC)	;WRITE 3" OF BLANK TAPE
	PUSHJ	P,MTXCT		;START THE WRITE
	MOVNI	TAC,MTREDO	;RESET ERROR COUNT.
	HRREM	TAC,MTERCN
	PUSHJ	P,MTERST	;WAIT FOR WBT.
	JRST	MRETRY		;GO RE-ISSUE READ OR WRITE.

MTERST:	POP	P,MTIDSP	;STORE RETURN ADDRESS.
MTIGN:	MOVEI	TAC,ICR		;RETURN ON ICR
	HRRM	TAC,MTCCON
	CONO	MTS,ICR		;ENABLE HARDWARE FOR ICR
	POPJ	P,		;DISMISS INTERRUPT

;INITIATE THE EXECUTION OF AN MTAPE FOR THE 
;   ERROR ROUTINES.  MUST BE CALLED FROM INTERRUPT LEVEL
;   WITH INTERFACE AND CONTROL READY (ICR)

MTXCT:	POP	P,MTIDSP	;STORE RETURN ADDRESS
	MOVEI	TAC1,XNC	;RETURN ON XNC
	CONO	PI,PIOFF
	CONO	MTC,(TAC)	;ISSUE THE OPERATION
	CONO	MTS,XNC		;ENABLE THE HARDWARE
	HRRM	TAC1,MTCCON	;AND THE SOFTWARE
	CONO	PI,PION		;ALLOW INTERRUPTS AGAIN
	POPJ	P,		;DISMISS INTERRUPT
;LOGICAL END OF TAPE LOOP
MTLEOT:	MOVEI	ITEM,7		;BACKSPACE
	PUSHJ	P,MTAPE2
	PUSHJ	P,MTCHK2	;CALL INTERLOCK. PICKUP IOS
				;AFTER PREVIOS TASK FINISHED.
MTEOT2:	MOVEI	ITEM,16		;SPACE ONE FILE
	PUSHJ	P,MTAPE2
	MOVEI	ITEM,6		;SPACE ONE RECORD
	PUSHJ	P,MTAPE
	PUSHJ	P,MTCHK2	;CALL INTERLOCK. 
				;RETURN WHEN SPACING DONE WITH NEW IOS
	TLNN	IOS,IOSEOF	;WAS EOF DETECTED?
	JRST	MTEOT2		;NO, RESUME SPACING.
	MOVEI	ITEM,7		;PREPARE FOR BACKSPACE MTAPE
	JRST	MTAPE2		;BACKSPACE, LOGICAL EOT FOUND RETURN TO CALLER
;DEVICE DEPENDENT DUMP MODES. MODE 16.
;OUTPUT:
MTDMPO:
	PUSHJ	P,COMCHK
	JRST	ADRERR
	PUSHJ	P,MTCHEK	;IS SYSTEM AVAILABLE
	TLO	IOS,IO		;WRITING
	CONSZ	MTS,TWL		;WRITE LOCK?
	JRST	MTOUTE		;YES.
	MOVE	TAC1,[BLKO DC,3400!<MTDC*10>!DCTCHN]
				;BLKO AND DATA CONTROL COMMAND
	HRRZ	TAC,UUO		; COMMAND LIST POINTER
	MOVEI	ITEM,2B27	;WRITING COMMAND
MTDMP1:	HRLI	TAC,PROG	;ACTUAL ADDRESS OF COMMAND LIST
	MOVEM	TAC,MTCMDP	;COMMAND POINTER
	SKIPN	TAC,@TAC	;COMMAND WORD
	JRST	MTEND1
	TLNN	TAC,777777
	JRST	MTDMP1		;CHANGE COMMAND SEQUENCE
	HLROM	TAC,SVCNTR	;SAVE COUNTER
	MOVEI	TAC,(TAC)	;GET ADDRESS ALONE
	SUB	TAC,SVCNTR	;GET LAST ADDRESS
	CAILE	TAC,JOBPFI	;ABOVE PROTECTED PART OF JOB DATA AREA?
	CAMLE	TAC,USRREL(PID)	;LESS THAN END?
	JRST	MTDMP2		;OUT OF BOUNDS
	MOVE	TAC,@MTCMDP	;PICK UP POINTER AGAIN
	ADDI	TAC,(PROG)	;GET ACTUAL ADDRESS
	PUSHJ	P,MTINDC	;MOVE TAPE
	JRST	WAIT1

;INPUT
MTDMPI:
	PUSHJ	P,COMCHK
	JRST	ADRERR
	PUSHJ	P,MTCHEK
	TLZ	IOS,IO		;READING
	TRNE	IOS,IODEND	;END-OF-FILE?
	JRST	MTEND1		;YES. GIVE BACK MAG TAPE.
	MOVE	TAC1,[BLKI DC,4000!<MTDC*10>!DCTCHN]
				;BLKI AND DATA CONTROL COMMAND
	HRRZ	TAC,UUO		;GET COMMAND LIST POINTER
	MOVEI	ITEM,5B27	;READ COMMAND
	JRST	MTDMP1		;DUMP
;ADDRESS ERROR

MTDMP2:	PUSHJ	P,MTEND1
	JRST	ADRERR
MTDPI1:	TRNE	IOS,IODEND	;EOF?
	JRST	MTEND1		;YES.
	MOVEI	ITEM,5B27	;READ COMMAND
	MOVE	TAC1,[BLKI DC,4000!<MTDC*10>!DCTCHN]
	JRST	MTDMP3

MTDPO1:	CONSZ	MTS,TEP		;AT EOT?
	JRST	MTEND1		;YES.
	MOVEI	ITEM,2B27	;WRITE COMMAND.
	MOVE	TAC1,[BLKO DC,3400!<MTDC*10>!DCTCHN]
MTDMP3:	HRLI	TAC,PROG	;FOLLOW COMMAND LIST.
	MOVEM	TAC,MTCMDP
	SKIPN	TAC,@TAC
	JRST	MTEND1		;END OF LIST.
	JUMPGE	TAC,MTDMP3	;CHANGE OF LIST.
	HLROM	TAC,SVCNTR
	HRRZS	TAC
	SUB	TAC,SVCNTR
	HLRZ	DAT,PROG
	CAILE	TAC,JOBPFI
	CAMLE	TAC,DAT
	JRST	MTDMP2
	MOVE	TAC,@MTCMDP
	ADDI	TAC,(PROG)
	JRST	MTINDC		;GO DO BLKO/BLKI
MDRTRY:	MOVE	TAC,@MTCMDP	;RETRY LAST OPERATION
	ADDI	TAC,(PROG)
	TLNN	IOS,IO		;INPUT?
	JRST	MDRT1		;YES.
	MOVE	TAC1,[BLKO DC,3400!<MTDC*10>!DCTCHN]
	MOVEI	ITEM,2B27	;WRITE COMMAND.
	JRST	MTINDC

MDRT1:	MOVE	TAC1,[BLKI DC,4000!<MTDC*10>!DCTCHN]
	MOVEI	ITEM,5B27	;READ COMMAND
	JRST	MTINDC		;START TAPE AND DISMISS INTERRUPT.
	BEND
